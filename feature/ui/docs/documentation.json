{
    "pipes": [],
    "interfaces": [
        {
            "name": "AccordionItem",
            "id": "interface-AccordionItem-8a2112730f21610469561e7786c7997e62ab90d2eb1a98e04a2b65fb990e620923b4eb92e1b96bd5aae3d0765cfdaa757365d4920b0fac92179e31871b717f4a",
            "file": "feature/ui/src/lib/ui/components/accordion/accordion.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgFor, NgIf } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { BrnAccordionContentComponent } from '@spartan-ng/ui-accordion-brain';\nimport {\n  HlmAccordionContentDirective,\n  HlmAccordionDirective,\n  HlmAccordionIconDirective,\n  HlmAccordionItemDirective,\n  HlmAccordionTriggerDirective,\n} from '@spartan-ng/ui-accordion-helm';\nimport { HlmIconComponent } from '@spartan-ng/ui-icon-helm';\n\nexport interface AccordionItem {\n  triggerText: string;\n  content: string;\n}\n\n@Component({\n\tselector: 'Accordion',\n\tstandalone: true,\n\timports: [\n\t\tBrnAccordionContentComponent,\n\t\tHlmAccordionDirective,\n\t\tHlmAccordionItemDirective,\n\t\tHlmAccordionTriggerDirective,\n\t\tHlmAccordionContentDirective,\n\t\tHlmAccordionIconDirective,\n\t\tHlmIconComponent,\n    NgIf,\n    NgFor,\n\t],\n\ttemplate: `\n    @if (items.length > 0) {\n\t\t<div hlmAccordion [class]=\"class\">\n      @for (item of items; track item.triggerText) {\n        <div hlmAccordionItem>\n          <button hlmAccordionTrigger>\n            {{ item.triggerText }}\n            <hlm-icon hlmAccIcon />\n          </button>\n          <brn-accordion-content hlm>\n            {{ item.content }}\n          </brn-accordion-content>\n        </div>\n      }\n\t\t</div>\n    } @else {\n      <p>Accordion has no items to display</p>\n    }\n\t`,\n})\nexport class AccordionComponent {\n  @Input() class = '';\n  @Input({required: true}) items!: AccordionItem[];\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "triggerText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CommandData",
            "id": "interface-CommandData-5cf1e3067079044a3eec34f74844f2d3af04b917f50f4b6fddcafbfe6b883b3eb3fbff8653640d254c45a0397fb38ae7a8b4a102d15178f838ddecbfb1efc9d7",
            "file": "feature/ui/src/lib/ui/components/command/command.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommandGroupComponent } from './partials/command-group.component';\n\nimport { Component, Input } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport {\n  BrnCommandImports\n} from '@spartan-ng/ui-command-brain';\nimport { HlmCommandImports } from '@spartan-ng/ui-command-helm';\nimport { HlmIconComponent } from '@spartan-ng/ui-icon-helm';\nimport { HlmButtonDirective } from '@spartan-ng/ui-button-helm';\nimport { IconComponent } from '../icon/icon.component';\nimport { ButtonComponent } from '../button/button.component';\nimport { IconName, provideIcons } from '@ng-icons/core';\nimport {\n  lucideCalendar,\n  lucideWallet,\n  lucideSmile,\n  lucideCog,\n  lucideSearch,\n  lucideUser,\n  lucidePlus,\n} from '@ng-icons/lucide';\n\nimport { CommandInputComponent } from './partials/command-input.component';\nimport { CommandListComponent } from './partials/command-list.component';\nimport { CommandItemComponent } from './partials/command-item.component';\nimport { CommandSeparatorComponent } from './partials/command-separator.component';\nimport { CommandEmptyComponent } from './partials/command-empty.component';\n\nexport interface CommandItem {\n  commandItemLabel: string;\n  commandItemIcon: IconName;\n  commandItemShortcut?: string;\n}\n\nexport interface CommandGroup {\n  commandGroupLabel: string;\n  commandItems: CommandItem[];\n}\n\nexport interface CommandData {\n  commandInputPlaceholder: string;\n  commandEmptyText: string;\n  commandGroups?: CommandGroup[];\n  commandItems?: CommandItem[];\n}\n\n@Component({\n  selector: 'Command',\n  standalone: true,\n  imports: [\n    BrnCommandImports,\n    HlmCommandImports,\n    HlmIconComponent,\n    IconComponent,\n    HlmButtonDirective,\n    ButtonComponent,\n    CommandInputComponent,\n    CommandListComponent,\n    CommandGroupComponent,\n    CommandItemComponent,\n    CommandSeparatorComponent,\n    CommandEmptyComponent,\n    NgIf,\n    NgFor,\n  ],\n  providers: [\n    provideIcons({ lucideSearch, lucideCalendar, lucideSmile, lucidePlus, lucideUser, lucideWallet, lucideCog }),\n  ],\n  template: `\n    @if( commandData ) {\n      <brn-cmd [class]=\"class\">\n        <!-- input wrapper -->\n        <hlm-cmd-input-wrapper>\n          <hlm-icon name=\"lucideSearch\" />\n          <input placeholder=\"{{ commandData.commandInputPlaceholder }}\" brnCmdInput hlm />\n        </hlm-cmd-input-wrapper>\n        <!-- command empty -->\n        <div *brnCmdEmpty hlmCmdEmpty>{{ commandData.commandEmptyText }}</div>\n        <!-- command list -->\n        <brn-cmd-list hlm>\n          <!-- command groups -->\n          @if( commandData.commandGroups ) {\n            @for (group of commandData.commandGroups; track group.commandGroupLabel; let last = $last) {\n              <brn-cmd-group hlm [label]=\"group.commandGroupLabel\" class=\"w-full\">\n                <!-- command items -->\n                @for (item of group.commandItems; track item.commandItemLabel) {\n                  <button brnCmdItem hlm class=\"w-full\">\n                    <hlm-icon [name]=\"item.commandItemIcon\" hlmCmdIcon />\n                    {{ item.commandItemLabel }}\n                    @if( item.commandItemShortcut ) {\n                      <hlm-cmd-shortcut>{{ item.commandItemShortcut }}</hlm-cmd-shortcut>\n                    }\n                  </button>\n                }\n              </brn-cmd-group>\n              @if( !last || commandData.commandItems) {\n                <brn-cmd-separator hlm />\n              }\n\n            }\n          }\n          <!-- command items -->\n          @if( commandData.commandItems ) {\n            <div class=\"p-1\">\n            @for (item of commandData.commandItems; track item.commandItemLabel) {\n              <button brnCmdItem hlm class=\"w-full\">\n                <hlm-icon [name]=\"item.commandItemIcon\" hlmCmdIcon />\n                {{ item.commandItemLabel }}\n                @if( item.commandItemShortcut ) {\n                  <hlm-cmd-shortcut>{{ item.commandItemShortcut }}</hlm-cmd-shortcut>\n                }\n              </button>\n            }\n            </div>\n          }\n        </brn-cmd-list>\n      </brn-cmd>\n    }\n  `,\n})\nexport class CommandComponent {\n  @Input() class = '';\n  @Input() commandEmptyText = 'No results found';\n\n  @Input({required: true}) commandData!: CommandData;\n\n}\n",
            "properties": [
                {
                    "name": "commandEmptyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "commandGroups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommandGroup[]",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "commandInputPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "commandItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommandItem[]",
                    "optional": true,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CommandGroup",
            "id": "interface-CommandGroup-5cf1e3067079044a3eec34f74844f2d3af04b917f50f4b6fddcafbfe6b883b3eb3fbff8653640d254c45a0397fb38ae7a8b4a102d15178f838ddecbfb1efc9d7",
            "file": "feature/ui/src/lib/ui/components/command/command.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommandGroupComponent } from './partials/command-group.component';\n\nimport { Component, Input } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport {\n  BrnCommandImports\n} from '@spartan-ng/ui-command-brain';\nimport { HlmCommandImports } from '@spartan-ng/ui-command-helm';\nimport { HlmIconComponent } from '@spartan-ng/ui-icon-helm';\nimport { HlmButtonDirective } from '@spartan-ng/ui-button-helm';\nimport { IconComponent } from '../icon/icon.component';\nimport { ButtonComponent } from '../button/button.component';\nimport { IconName, provideIcons } from '@ng-icons/core';\nimport {\n  lucideCalendar,\n  lucideWallet,\n  lucideSmile,\n  lucideCog,\n  lucideSearch,\n  lucideUser,\n  lucidePlus,\n} from '@ng-icons/lucide';\n\nimport { CommandInputComponent } from './partials/command-input.component';\nimport { CommandListComponent } from './partials/command-list.component';\nimport { CommandItemComponent } from './partials/command-item.component';\nimport { CommandSeparatorComponent } from './partials/command-separator.component';\nimport { CommandEmptyComponent } from './partials/command-empty.component';\n\nexport interface CommandItem {\n  commandItemLabel: string;\n  commandItemIcon: IconName;\n  commandItemShortcut?: string;\n}\n\nexport interface CommandGroup {\n  commandGroupLabel: string;\n  commandItems: CommandItem[];\n}\n\nexport interface CommandData {\n  commandInputPlaceholder: string;\n  commandEmptyText: string;\n  commandGroups?: CommandGroup[];\n  commandItems?: CommandItem[];\n}\n\n@Component({\n  selector: 'Command',\n  standalone: true,\n  imports: [\n    BrnCommandImports,\n    HlmCommandImports,\n    HlmIconComponent,\n    IconComponent,\n    HlmButtonDirective,\n    ButtonComponent,\n    CommandInputComponent,\n    CommandListComponent,\n    CommandGroupComponent,\n    CommandItemComponent,\n    CommandSeparatorComponent,\n    CommandEmptyComponent,\n    NgIf,\n    NgFor,\n  ],\n  providers: [\n    provideIcons({ lucideSearch, lucideCalendar, lucideSmile, lucidePlus, lucideUser, lucideWallet, lucideCog }),\n  ],\n  template: `\n    @if( commandData ) {\n      <brn-cmd [class]=\"class\">\n        <!-- input wrapper -->\n        <hlm-cmd-input-wrapper>\n          <hlm-icon name=\"lucideSearch\" />\n          <input placeholder=\"{{ commandData.commandInputPlaceholder }}\" brnCmdInput hlm />\n        </hlm-cmd-input-wrapper>\n        <!-- command empty -->\n        <div *brnCmdEmpty hlmCmdEmpty>{{ commandData.commandEmptyText }}</div>\n        <!-- command list -->\n        <brn-cmd-list hlm>\n          <!-- command groups -->\n          @if( commandData.commandGroups ) {\n            @for (group of commandData.commandGroups; track group.commandGroupLabel; let last = $last) {\n              <brn-cmd-group hlm [label]=\"group.commandGroupLabel\" class=\"w-full\">\n                <!-- command items -->\n                @for (item of group.commandItems; track item.commandItemLabel) {\n                  <button brnCmdItem hlm class=\"w-full\">\n                    <hlm-icon [name]=\"item.commandItemIcon\" hlmCmdIcon />\n                    {{ item.commandItemLabel }}\n                    @if( item.commandItemShortcut ) {\n                      <hlm-cmd-shortcut>{{ item.commandItemShortcut }}</hlm-cmd-shortcut>\n                    }\n                  </button>\n                }\n              </brn-cmd-group>\n              @if( !last || commandData.commandItems) {\n                <brn-cmd-separator hlm />\n              }\n\n            }\n          }\n          <!-- command items -->\n          @if( commandData.commandItems ) {\n            <div class=\"p-1\">\n            @for (item of commandData.commandItems; track item.commandItemLabel) {\n              <button brnCmdItem hlm class=\"w-full\">\n                <hlm-icon [name]=\"item.commandItemIcon\" hlmCmdIcon />\n                {{ item.commandItemLabel }}\n                @if( item.commandItemShortcut ) {\n                  <hlm-cmd-shortcut>{{ item.commandItemShortcut }}</hlm-cmd-shortcut>\n                }\n              </button>\n            }\n            </div>\n          }\n        </brn-cmd-list>\n      </brn-cmd>\n    }\n  `,\n})\nexport class CommandComponent {\n  @Input() class = '';\n  @Input() commandEmptyText = 'No results found';\n\n  @Input({required: true}) commandData!: CommandData;\n\n}\n",
            "properties": [
                {
                    "name": "commandGroupLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "commandItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommandItem[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CommandItem",
            "id": "interface-CommandItem-5cf1e3067079044a3eec34f74844f2d3af04b917f50f4b6fddcafbfe6b883b3eb3fbff8653640d254c45a0397fb38ae7a8b4a102d15178f838ddecbfb1efc9d7",
            "file": "feature/ui/src/lib/ui/components/command/command.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommandGroupComponent } from './partials/command-group.component';\n\nimport { Component, Input } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport {\n  BrnCommandImports\n} from '@spartan-ng/ui-command-brain';\nimport { HlmCommandImports } from '@spartan-ng/ui-command-helm';\nimport { HlmIconComponent } from '@spartan-ng/ui-icon-helm';\nimport { HlmButtonDirective } from '@spartan-ng/ui-button-helm';\nimport { IconComponent } from '../icon/icon.component';\nimport { ButtonComponent } from '../button/button.component';\nimport { IconName, provideIcons } from '@ng-icons/core';\nimport {\n  lucideCalendar,\n  lucideWallet,\n  lucideSmile,\n  lucideCog,\n  lucideSearch,\n  lucideUser,\n  lucidePlus,\n} from '@ng-icons/lucide';\n\nimport { CommandInputComponent } from './partials/command-input.component';\nimport { CommandListComponent } from './partials/command-list.component';\nimport { CommandItemComponent } from './partials/command-item.component';\nimport { CommandSeparatorComponent } from './partials/command-separator.component';\nimport { CommandEmptyComponent } from './partials/command-empty.component';\n\nexport interface CommandItem {\n  commandItemLabel: string;\n  commandItemIcon: IconName;\n  commandItemShortcut?: string;\n}\n\nexport interface CommandGroup {\n  commandGroupLabel: string;\n  commandItems: CommandItem[];\n}\n\nexport interface CommandData {\n  commandInputPlaceholder: string;\n  commandEmptyText: string;\n  commandGroups?: CommandGroup[];\n  commandItems?: CommandItem[];\n}\n\n@Component({\n  selector: 'Command',\n  standalone: true,\n  imports: [\n    BrnCommandImports,\n    HlmCommandImports,\n    HlmIconComponent,\n    IconComponent,\n    HlmButtonDirective,\n    ButtonComponent,\n    CommandInputComponent,\n    CommandListComponent,\n    CommandGroupComponent,\n    CommandItemComponent,\n    CommandSeparatorComponent,\n    CommandEmptyComponent,\n    NgIf,\n    NgFor,\n  ],\n  providers: [\n    provideIcons({ lucideSearch, lucideCalendar, lucideSmile, lucidePlus, lucideUser, lucideWallet, lucideCog }),\n  ],\n  template: `\n    @if( commandData ) {\n      <brn-cmd [class]=\"class\">\n        <!-- input wrapper -->\n        <hlm-cmd-input-wrapper>\n          <hlm-icon name=\"lucideSearch\" />\n          <input placeholder=\"{{ commandData.commandInputPlaceholder }}\" brnCmdInput hlm />\n        </hlm-cmd-input-wrapper>\n        <!-- command empty -->\n        <div *brnCmdEmpty hlmCmdEmpty>{{ commandData.commandEmptyText }}</div>\n        <!-- command list -->\n        <brn-cmd-list hlm>\n          <!-- command groups -->\n          @if( commandData.commandGroups ) {\n            @for (group of commandData.commandGroups; track group.commandGroupLabel; let last = $last) {\n              <brn-cmd-group hlm [label]=\"group.commandGroupLabel\" class=\"w-full\">\n                <!-- command items -->\n                @for (item of group.commandItems; track item.commandItemLabel) {\n                  <button brnCmdItem hlm class=\"w-full\">\n                    <hlm-icon [name]=\"item.commandItemIcon\" hlmCmdIcon />\n                    {{ item.commandItemLabel }}\n                    @if( item.commandItemShortcut ) {\n                      <hlm-cmd-shortcut>{{ item.commandItemShortcut }}</hlm-cmd-shortcut>\n                    }\n                  </button>\n                }\n              </brn-cmd-group>\n              @if( !last || commandData.commandItems) {\n                <brn-cmd-separator hlm />\n              }\n\n            }\n          }\n          <!-- command items -->\n          @if( commandData.commandItems ) {\n            <div class=\"p-1\">\n            @for (item of commandData.commandItems; track item.commandItemLabel) {\n              <button brnCmdItem hlm class=\"w-full\">\n                <hlm-icon [name]=\"item.commandItemIcon\" hlmCmdIcon />\n                {{ item.commandItemLabel }}\n                @if( item.commandItemShortcut ) {\n                  <hlm-cmd-shortcut>{{ item.commandItemShortcut }}</hlm-cmd-shortcut>\n                }\n              </button>\n            }\n            </div>\n          }\n        </brn-cmd-list>\n      </brn-cmd>\n    }\n  `,\n})\nexport class CommandComponent {\n  @Input() class = '';\n  @Input() commandEmptyText = 'No results found';\n\n  @Input({required: true}) commandData!: CommandData;\n\n}\n",
            "properties": [
                {
                    "name": "commandItemIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "commandItemLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "commandItemShortcut",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-8a2112730f21610469561e7786c7997e62ab90d2eb1a98e04a2b65fb990e620923b4eb92e1b96bd5aae3d0765cfdaa757365d4920b0fac92179e31871b717f4a",
            "file": "feature/ui/src/lib/ui/components/accordion/accordion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "Accordion",
            "styleUrls": [],
            "styles": [],
            "template": "  @if (items.length > 0) {\n<div hlmAccordion [class]=\"class\">\n    @for (item of items; track item.triggerText) {\n      <div hlmAccordionItem>\n        <button hlmAccordionTrigger>\n          {{ item.triggerText }}\n          <hlm-icon hlmAccIcon />\n        </button>\n        <brn-accordion-content hlm>\n          {{ item.content }}\n        </brn-accordion-content>\n      </div>\n    }\n</div>\n  } @else {\n    <p>Accordion has no items to display</p>\n  }\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 54,
                    "type": "AccordionItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "BrnAccordionContentComponent",
                    "type": "component"
                },
                {
                    "name": "HlmAccordionDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAccordionItemDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAccordionTriggerDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAccordionContentDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAccordionIconDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmIconComponent",
                    "type": "component"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgFor"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgFor, NgIf } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { BrnAccordionContentComponent } from '@spartan-ng/ui-accordion-brain';\nimport {\n  HlmAccordionContentDirective,\n  HlmAccordionDirective,\n  HlmAccordionIconDirective,\n  HlmAccordionItemDirective,\n  HlmAccordionTriggerDirective,\n} from '@spartan-ng/ui-accordion-helm';\nimport { HlmIconComponent } from '@spartan-ng/ui-icon-helm';\n\nexport interface AccordionItem {\n  triggerText: string;\n  content: string;\n}\n\n@Component({\n\tselector: 'Accordion',\n\tstandalone: true,\n\timports: [\n\t\tBrnAccordionContentComponent,\n\t\tHlmAccordionDirective,\n\t\tHlmAccordionItemDirective,\n\t\tHlmAccordionTriggerDirective,\n\t\tHlmAccordionContentDirective,\n\t\tHlmAccordionIconDirective,\n\t\tHlmIconComponent,\n    NgIf,\n    NgFor,\n\t],\n\ttemplate: `\n    @if (items.length > 0) {\n\t\t<div hlmAccordion [class]=\"class\">\n      @for (item of items; track item.triggerText) {\n        <div hlmAccordionItem>\n          <button hlmAccordionTrigger>\n            {{ item.triggerText }}\n            <hlm-icon hlmAccIcon />\n          </button>\n          <brn-accordion-content hlm>\n            {{ item.content }}\n          </brn-accordion-content>\n        </div>\n      }\n\t\t</div>\n    } @else {\n      <p>Accordion has no items to display</p>\n    }\n\t`,\n})\nexport class AccordionComponent {\n  @Input() class = '';\n  @Input({required: true}) items!: AccordionItem[];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-a64771e2c2264dd81ffd6090c3e84cbfa1b3142646fc94e996508865d234ad281a0515c6a9186cd242027d46c103a665cffbaaaf71995c64877ac59d1962ef84",
            "file": "feature/ui/src/lib/ui/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({ lucideAlertTriangle })"
                }
            ],
            "selector": "Alert",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: contents;\n    }\n  "
            ],
            "template": "<div hlmAlert [variant]=\"variant\" [class]=\"'p-4 flex ' + class\" >\n  <Icon [name]=\"alertIconName\" size=\"sm\" />\n  <div class=\"px-4\">\n    <h4 hlmAlertTitle>{{alertTitle}}</h4>\n    <div hlmAlertDescription>\n      <ng-content />\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alertIconName",
                    "defaultValue": "'lucideAlertTriangle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "alertTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "\"default\" | \"destructive\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmAlertDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAlertDescriptionDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAlertIconDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAlertTitleDirective",
                    "type": "directive"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport {\n  HlmAlertDescriptionDirective,\n  HlmAlertDirective,\n  HlmAlertIconDirective,\n  HlmAlertTitleDirective,\n} from '@spartan-ng/ui-alert-helm';\nimport { IconComponent } from \"../icon/icon.component\";\nimport { IconName, provideIcons } from '@ng-icons/core';\nimport { lucideAlertTriangle } from '@ng-icons/lucide';\n\n\n@Component({\n  selector: 'Alert',\n  standalone: true,\n  imports: [\n    HlmAlertDirective,\n    HlmAlertDescriptionDirective,\n    HlmAlertIconDirective,\n    HlmAlertTitleDirective,\n    IconComponent\n  ],\n  providers: [provideIcons({ lucideAlertTriangle })],\n  styles: [`\n    :host {\n      display: contents;\n    }\n  `],\n  template: `\n    <div hlmAlert [variant]=\"variant\" [class]=\"'p-4 flex ' + class\" >\n      <Icon [name]=\"alertIconName\" size=\"sm\" />\n      <div class=\"px-4\">\n        <h4 hlmAlertTitle>{{alertTitle}}</h4>\n        <div hlmAlertDescription>\n          <ng-content />\n        </div>\n      </div>\n    </div>\n  `,\n})\nexport class AlertComponent {\n  @Input() class = '';\n  @Input() variant: 'default' | 'destructive' = 'default';\n  @Input({required: true}) alertTitle!: string;\n  @Input() alertIconName: IconName = 'lucideAlertTriangle';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: contents;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "AlertDialogComponent",
            "id": "component-AlertDialogComponent-9feaa49186dd621a5bd9e848268306bc5f357bd56319beae8f5e448f718b04ed63e0f10bd03da94714e332b364b8368ed7ad2672034a90dbc505dde074fe04a8",
            "file": "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "AlertDialog",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: contents;\n    }\n\n  "
            ],
            "template": "<hlm-alert-dialog [class]=\"class\">\n  <button id=\"edit-profile\" variant=\"outline\" brnAlertDialogTrigger hlmBtn>Delete Account</button>\n  <hlm-alert-dialog-content *brnAlertDialogContent=\"let ctx\">\n    <hlm-alert-dialog-header>\n      <h3 hlmAlertDialogTitle>{{title}}</h3>\n      <p hlmAlertDialogDescription>\n        <ng-content />\n      </p>\n    </hlm-alert-dialog-header>\n    <hlm-alert-dialog-footer>\n      <button class=\"mr-2\" hlmAlertDialogCancel (click)=\"emitEvent(ctx, 'cancel') \">{{cancelLabel}}</button>\n      <button hlmAlertDialogAction (click)=\"emitEvent(ctx, 'confirm') \">{{confirmLabel}}</button>\n    </hlm-alert-dialog-footer>\n  </hlm-alert-dialog-content>\n</hlm-alert-dialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "cancelLabel",
                    "defaultValue": "'Cancel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "confirmLabel",
                    "defaultValue": "'Delete Account'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "title",
                    "defaultValue": "'Are you absolutely sure?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 65,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "confirm",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitEvent",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "\"confirm\" | \"cancel\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "\"confirm\" | \"cancel\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "BrnAlertDialogTriggerDirective",
                    "type": "directive"
                },
                {
                    "name": "BrnAlertDialogContentDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAlertDialogComponent",
                    "type": "component"
                },
                {
                    "name": "HlmAlertDialogOverlayDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAlertDialogHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "HlmAlertDialogFooterComponent",
                    "type": "component"
                },
                {
                    "name": "HlmAlertDialogTitleDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAlertDialogDescriptionDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAlertDialogCancelButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAlertDialogActionButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAlertDialogContentComponent",
                    "type": "component"
                },
                {
                    "name": "HlmButtonDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  BrnAlertDialogContentDirective,\n  BrnAlertDialogTriggerDirective,\n} from '@spartan-ng/ui-alertdialog-brain';\nimport {\n  HlmAlertDialogActionButtonDirective,\n  HlmAlertDialogCancelButtonDirective,\n  HlmAlertDialogComponent,\n  HlmAlertDialogContentComponent,\n  HlmAlertDialogDescriptionDirective,\n  HlmAlertDialogFooterComponent,\n  HlmAlertDialogHeaderComponent,\n  HlmAlertDialogOverlayDirective,\n  HlmAlertDialogTitleDirective,\n} from '@spartan-ng/ui-alertdialog-helm';\nimport { HlmButtonDirective } from '@spartan-ng/ui-button-helm';\n\n@Component({\n  selector: 'AlertDialog',\n  standalone: true,\n  imports: [\n    BrnAlertDialogTriggerDirective,\n    BrnAlertDialogContentDirective,\n\n    HlmAlertDialogComponent,\n    HlmAlertDialogOverlayDirective,\n    HlmAlertDialogHeaderComponent,\n    HlmAlertDialogFooterComponent,\n    HlmAlertDialogTitleDirective,\n    HlmAlertDialogDescriptionDirective,\n    HlmAlertDialogCancelButtonDirective,\n    HlmAlertDialogActionButtonDirective,\n    HlmAlertDialogContentComponent,\n\n    HlmButtonDirective,\n  ],\n  template: `\n    <hlm-alert-dialog [class]=\"class\">\n      <button id=\"edit-profile\" variant=\"outline\" brnAlertDialogTrigger hlmBtn>Delete Account</button>\n      <hlm-alert-dialog-content *brnAlertDialogContent=\"let ctx\">\n        <hlm-alert-dialog-header>\n          <h3 hlmAlertDialogTitle>{{title}}</h3>\n          <p hlmAlertDialogDescription>\n            <ng-content />\n          </p>\n        </hlm-alert-dialog-header>\n        <hlm-alert-dialog-footer>\n          <button class=\"mr-2\" hlmAlertDialogCancel (click)=\"emitEvent(ctx, 'cancel') \">{{cancelLabel}}</button>\n          <button hlmAlertDialogAction (click)=\"emitEvent(ctx, 'confirm') \">{{confirmLabel}}</button>\n        </hlm-alert-dialog-footer>\n      </hlm-alert-dialog-content>\n    </hlm-alert-dialog>\n  `,\n  styles: `\n    :host {\n      display: contents;\n    }\n\n  `,\n})\nexport class AlertDialogComponent {\n  @Input() class = '';\n  @Input({ required: true}) title = 'Are you absolutely sure?';\n  @Input({ required: true}) cancelLabel = 'Cancel';\n  @Input({ required: true}) confirmLabel = 'Delete Account';\n  @Output() confirm = new EventEmitter();\n  @Output() cancel = new EventEmitter();\n\n  emitEvent(ctx: { close: () => void; }, event: 'confirm' | 'cancel') {\n    const eventString = (event as 'confirm' | 'cancel').toUpperCase();\n    this[event].emit({value: `ALERTDIALOG-${eventString}-CLICKED`});\n    ctx.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: contents;\n    }\n\n  \n",
            "extends": []
        },
        {
            "name": "AspectRatioComponent",
            "id": "component-AspectRatioComponent-f2b1f811d9960bc0e9d415da7fea28919c04755f92a1009ba7785b80ec02721c6ec5fd302626a68800649b011f213a1d9d0a9c5f94f2d7bbab26d12d87696b2f",
            "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "AspectRatio",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: contents;\n    }\n    "
            ],
            "template": "<div class=\"overflow-hidden rounded-xl drop-shadow\">\n  <div [hlmAspectRatio]=\"ratio\">\n    <ng-content />\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "ratio",
                    "defaultValue": "\"1 / 1\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 30,
                    "type": "square | portrait | landscape",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmAspectRatioDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { HlmAspectRatioDirective } from '@spartan-ng/ui-aspectratio-helm';\n\nexport type square = \"1 / 1\";\nexport type portrait = \"9 / 16\";\nexport type landscape = \"16 / 9\";\n\n@Component({\n  selector: 'AspectRatio',\n  standalone: true,\n  imports: [HlmAspectRatioDirective],\n  template: `\n    <div class=\"overflow-hidden rounded-xl drop-shadow\">\n      <div [hlmAspectRatio]=\"ratio\">\n        <ng-content />\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n    :host {\n      display: contents;\n    }\n    `\n\n  ]\n})\nexport class AspectRatioComponent {\n  @Input({required: true}) ratio: square | portrait | landscape = \"1 / 1\"\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: contents;\n    }\n    \n",
            "extends": []
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-6072fa9cc9e53b4653814c75923be1b4e8048c3924a415cc5cc954d7095e7fd10bd39f021890202601c466cf4eb58487df6c4a23bd84d709827772ce9f034d89",
            "file": "feature/ui/src/lib/ui/components/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "Avatar",
            "styleUrls": [],
            "styles": [],
            "template": "<hlm-avatar [variant]=\"variant\">\n  <img src=\"{{imgSrc}}\" alt=\"{{imgAltText}}\" hlmAvatarImage />\n  <span class=\"bg-[{{fallbackBgColor}}] text-white\" hlmAvatarFallback>{{fallbackText}}</span>\n</hlm-avatar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fallbackBgColor",
                    "defaultValue": "'#FD005B'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fallbackText",
                    "defaultValue": "'MU'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imgAltText",
                    "defaultValue": "'avatar image description'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "imgSrc",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmAvatarImageDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAvatarComponent",
                    "type": "component"
                },
                {
                    "name": "HlmAvatarFallbackDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { HlmAvatarComponent, HlmAvatarFallbackDirective, HlmAvatarImageDirective } from '@spartan-ng/ui-avatar-helm';\n\n@Component({\n  selector: 'Avatar',\n  standalone: true,\n  imports: [HlmAvatarImageDirective, HlmAvatarComponent, HlmAvatarFallbackDirective],\n  template: `\n    <hlm-avatar [variant]=\"variant\">\n      <img src=\"{{imgSrc}}\" alt=\"{{imgAltText}}\" hlmAvatarImage />\n      <span class=\"bg-[{{fallbackBgColor}}] text-white\" hlmAvatarFallback>{{fallbackText}}</span>\n    </hlm-avatar>\n  `,\n})\nexport class AvatarComponent {\n  @Input() variant: 'small' | 'medium' | 'large' = 'small';\n  @Input({required: true}) imgSrc = '';\n  @Input() imgAltText = 'avatar image description'\n  @Input() fallbackText = 'MU';\n  @Input() fallbackBgColor = '#FD005B';\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-2cb3fe3482f08b55b64e4c050d5dcd17ba18f69cbbbc58c70ed73a07d2c2ac249587b7d2f83e453de979092d90cbd843e9c3531db8f32480a1dc93008770b16a",
            "file": "feature/ui/src/lib/ui/components/badge/badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "Badge",
            "styleUrls": [],
            "styles": [],
            "template": "<div hlmBadge [variant]=\"badgeVariant\" [size]=\"badgeSize\">\n  @if( badgeRouterLinkUrl && !badgeLinkUrl) {\n    <a routerLink=\"{{badgeRouterLinkUrl}}\">{{badgeText}}</a>\n  }\n  @if( badgeLinkUrl && !badgeRouterLinkUrl) {\n    <a href=\"{{badgeLinkUrl}}\" target=\"{{badgeLinkTarget}}\">{{badgeText}}</a>\n  }\n  @if( !badgeLinkUrl && !badgeRouterLinkUrl) {\n    <span>{{badgeText}}</span>\n  }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "badgeLinkTarget",
                    "defaultValue": "'_blank'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntarget attribute value for the badgeLinkUrl\n",
                    "description": "<p>target attribute value for the badgeLinkUrl</p>\n",
                    "line": 48,
                    "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\"",
                    "decorators": []
                },
                {
                    "name": "badgeLinkUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nhtml link to navigate to - great for external links\n",
                    "description": "<p>html link to navigate to - great for external links</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "badgeRouterLinkUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nlink if wanting to use angular router\n",
                    "description": "<p>link if wanting to use angular router</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "badgeSize",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsize for the badge\n",
                    "description": "<p>size for the badge</p>\n",
                    "line": 36,
                    "type": "\"default\" | \"lg\"",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "badgeText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\ntext to be displayed in the badge\n",
                    "description": "<p>text to be displayed in the badge</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "badgeVariant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nvariant of the badge\n",
                    "description": "<p>variant of the badge</p>\n",
                    "line": 32,
                    "type": "\"default\" | \"secondary\" | \"outline\" | \"destructive\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmBadgeDirective",
                    "type": "directive"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { HlmBadgeDirective } from '@spartan-ng/ui-badge-helm';\nimport { NgIf } from '@angular/common';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'Badge',\n  standalone: true,\n  imports: [HlmBadgeDirective, NgIf, RouterLink],\n  template: `\n    <div hlmBadge [variant]=\"badgeVariant\" [size]=\"badgeSize\">\n      @if( badgeRouterLinkUrl && !badgeLinkUrl) {\n        <a routerLink=\"{{badgeRouterLinkUrl}}\">{{badgeText}}</a>\n      }\n      @if( badgeLinkUrl && !badgeRouterLinkUrl) {\n        <a href=\"{{badgeLinkUrl}}\" target=\"{{badgeLinkTarget}}\">{{badgeText}}</a>\n      }\n      @if( !badgeLinkUrl && !badgeRouterLinkUrl) {\n        <span>{{badgeText}}</span>\n      }\n    </div>\n  `,\n})\nexport class BadgeComponent {\n  /**\n   * text to be displayed in the badge\n   */\n  @Input({required: true}) badgeText! : string;\n  /**\n   * variant of the badge\n   */\n  @Input() badgeVariant: 'default' | 'secondary' | 'outline' | 'destructive' = 'default';\n  /**\n   * size for the badge\n   */\n  @Input() badgeSize: 'default' | 'lg' = 'default';\n  /**\n   * html link to navigate to - great for external links\n   */\n  @Input() badgeLinkUrl! : string;\n  /**\n   * link if wanting to use angular router\n   */\n  @Input() badgeRouterLinkUrl! : string;\n  /**\n   * target attribute value for the badgeLinkUrl\n   */\n  @Input() badgeLinkTarget : '_blank' | '_self' | '_parent' | '_top' = '_blank';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-9a3da8885728b96dc0caa85e58800abbc9fa3f6f753842e7d3167cbbdb081ccbf980620e083960c4de27408bae7d597e15a4d262c972603a1600965a42ad9d15",
            "file": "feature/ui/src/lib/ui/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "Button",
            "styleUrls": [],
            "styles": [],
            "template": "<button hlmBtn [variant]=\"variant\" [size]=\"size\">\n  <ng-content></ng-content>\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"default\" | \"sm\" | \"lg\" | \"icon\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "\"secondary\" | \"destructive\" | \"outline\" | \"ghost\" | \"link\" | \"default\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmButtonDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { HlmButtonDirective } from '@spartan-ng/ui-button-helm';\n\n@Component({\n  selector: 'Button',\n  standalone: true,\n  imports: [HlmButtonDirective],\n  template: `\n  <button hlmBtn [variant]=\"variant\" [size]=\"size\">\n    <ng-content></ng-content>\n  </button> `,\n})\nexport class ButtonComponent {\n  @Input() variant: 'secondary' | 'destructive' | 'outline' | 'ghost' | 'link' | 'default' = 'default';\n  @Input() size: 'default' | 'sm' | 'lg' | 'icon' = 'default';\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-2bf4a8838fb8af06fc05e00b41be74b6fd68a90d7d3fe95f74fa4ef72cd3f1f5490c2c1e1a0b7bd620ba1f7ef5e85fc8042bd5d114fee3d537ddd2ce03d0b807",
            "file": "feature/ui/src/lib/ui/components/card/partials/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "Card",
            "styleUrls": [],
            "styles": [],
            "template": "<div hlmCard [class]=\"class\">\n  <ng-content />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadd tailwind classes to override defaults (e.g. 'text-2xl p-2')\n",
                    "description": "<p>add tailwind classes to override defaults (e.g. &#39;text-2xl p-2&#39;)</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmCardDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { HlmCardDirective } from '@spartan-ng/ui-card-helm';\n\n@Component({\n  selector: 'Card',\n  standalone: true,\n  imports: [HlmCardDirective],\n  template: `\n    <div hlmCard [class]=\"class\">\n      <ng-content />\n    </div>\n  `,\n})\nexport class CardComponent {\n  /**\n   * add tailwind classes to override defaults (e.g. 'text-2xl p-2')\n   */\n  @Input() class = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CardContentComponent",
            "id": "component-CardContentComponent-23bf940592a99a99b167065d0e52df45d966f9d928268d4af93b65289a554bc0ba48c1b101eb84d34fd6a2e12143300ef8b1fed99a315f1a4f164b7a575eb043",
            "file": "feature/ui/src/lib/ui/components/card/partials/card-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "CardContent",
            "styleUrls": [],
            "styles": [],
            "template": "<div hlmCardContent [class]=\"contentClass\">\n  <ng-content />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "contentClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadd tailwind classes to override defaults (e.g. 'text-2xl p-2')\n",
                    "description": "<p>add tailwind classes to override defaults (e.g. &#39;text-2xl p-2&#39;)</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmCardContentDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { HlmCardContentDirective } from '@spartan-ng/ui-card-helm';\n\n@Component({\n  selector: 'CardContent',\n  standalone: true,\n  imports: [HlmCardContentDirective],\n  template: `\n    <div hlmCardContent [class]=\"contentClass\">\n      <ng-content />\n    </div>\n  `\n})\nexport class CardContentComponent {\n  /**\n   * add tailwind classes to override defaults (e.g. 'text-2xl p-2')\n   */\n  @Input() contentClass = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CardDescriptionComponent",
            "id": "component-CardDescriptionComponent-3ef7e26a323e98f4d69f48d0674ccea837d44c731a80e06dac5d941eee79c7299017555e69c48cb0cb5ce08605bf6c4a096be1ec3c68a01d770b9ae96184399b",
            "file": "feature/ui/src/lib/ui/components/card/partials/card-description.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "CardDescription",
            "styleUrls": [],
            "styles": [],
            "template": "<p hlmCardDescription [class]=\"descriptionClass\">\n  <ng-content />\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "descriptionClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadd tailwind classes to override defaults (e.g. 'text-2xl p-2')\n",
                    "description": "<p>add tailwind classes to override defaults (e.g. &#39;text-2xl p-2&#39;)</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmCardDescriptionDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { HlmCardDescriptionDirective } from '@spartan-ng/ui-card-helm';\n\n@Component({\n  selector: 'CardDescription',\n  standalone: true,\n  imports: [HlmCardDescriptionDirective],\n  template: `\n    <p hlmCardDescription [class]=\"descriptionClass\">\n      <ng-content />\n    </p>\n  `\n})\nexport class CardDescriptionComponent {\n  /**\n   * add tailwind classes to override defaults (e.g. 'text-2xl p-2')\n   */\n  @Input() descriptionClass = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CardFooterComponent",
            "id": "component-CardFooterComponent-71ec29db93a0a1c3c537fd6ca7396734e3e7f6dcd3086e212bdecc5ebb63307d23b2303f510789556b3eca4b427e397ac29b99eb09b396eb19ad0762bc530994",
            "file": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "CardFooter",
            "styleUrls": [],
            "styles": [],
            "template": "<div hlmCardFooter [class]=\"footerClass\">\n  <ng-content />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "footerClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadd tailwind classes to override defaults (e.g. 'text-2xl p-2')\n",
                    "description": "<p>add tailwind classes to override defaults (e.g. &#39;text-2xl p-2&#39;)</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmCardFooterDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { HlmCardFooterDirective } from '@spartan-ng/ui-card-helm';\n\n@Component({\n  selector: 'CardFooter',\n  standalone: true,\n  imports: [HlmCardFooterDirective],\n  template: `\n    <div hlmCardFooter [class]=\"footerClass\">\n      <ng-content />\n    </div>\n  `\n})\nexport class CardFooterComponent {\n  /**\n   * add tailwind classes to override defaults (e.g. 'text-2xl p-2')\n   */\n  @Input() footerClass = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CardHeaderComponent",
            "id": "component-CardHeaderComponent-ebeba765b1db0644097ba74e78d5d76fa6c3587a41b50d7ea2f9392a179f508910020ecc731e852aa4a79a7a6a694e3bde24395e98840510c98f56648d1a01f1",
            "file": "feature/ui/src/lib/ui/components/card/partials/card-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "CardHeader",
            "styleUrls": [],
            "styles": [],
            "template": "<div hlmCardHeader [class]=\"headerClass\">\n  <ng-content />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "headerClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmCardHeaderDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { HlmCardHeaderDirective } from '@spartan-ng/ui-card-helm';\n\n@Component({\n  selector: 'CardHeader',\n  standalone: true,\n  imports: [HlmCardHeaderDirective],\n  template: `\n    <div hlmCardHeader [class]=\"headerClass\">\n      <ng-content />\n    </div>\n  `\n})\nexport class CardHeaderComponent {\n  @Input() headerClass = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CardTitleComponent",
            "id": "component-CardTitleComponent-eeed95fe8b59a4497c656932bda255273c4f5814365f699fbd303b90960c3379208b1ade892cb12b5bc72056979b030ca72ae7ab4f6483e8ca813e92cb7904b6",
            "file": "feature/ui/src/lib/ui/components/card/partials/card-title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "CardTitle",
            "styleUrls": [],
            "styles": [],
            "template": "<h3 hlmCardTitle [class]=\"class\">\n  <ng-content />\n</h3>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "'text-4xl'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadd tailwind classes to override defaults (e.g. 'text-2xl p-2')\n",
                    "description": "<p>add tailwind classes to override defaults (e.g. &#39;text-2xl p-2&#39;)</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmCardTitleDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, model } from '@angular/core';\nimport { HlmCardTitleDirective } from '@spartan-ng/ui-card-helm';\n\n@Component({\n  selector: 'CardTitle',\n  standalone: true,\n  imports: [HlmCardTitleDirective],\n  template: `\n    <h3 hlmCardTitle [class]=\"class\">\n      <ng-content />\n    </h3>\n  `\n})\nexport class CardTitleComponent {\n  /**\n   * add tailwind classes to override defaults (e.g. 'text-2xl p-2')\n   */\n  @Input() class = 'text-4xl';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CarouselComponent",
            "id": "component-CarouselComponent-fd2b9fd184d533139db57d84a7b75061a13f1db26bd603e2c76815690d81484c6eaba16c86f30f0c0e71d204e280e3e014b75539d75fd81ed58569f4bbcb7f0c",
            "file": "feature/ui/src/lib/ui/components/carousel/carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "Carousel",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"flex items-center justify-center w-full p-4\">\n  <hlm-carousel [class]=\"'w-full ' + carouselMaxWidthClass\" >\n    <hlm-carousel-content>\n    @for (item of items; track item) {\n      <hlm-carousel-item>\n        <div class=\"p-1\">\n          <Card>\n            <CardContent [class]=\"carouselContentClass\">\n              <div [class]=\"carouselItemClass\">{{ item }}</div>\n            </CardContent>\n          </Card>\n        </div>\n      </hlm-carousel-item>\n    } @empty {\n      <p>No carousel items</p>\n    }\n    </hlm-carousel-content>\n    <button hlm-carousel-previous></button>\n    <button hlm-carousel-next></button>\n  </hlm-carousel>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "carouselContentClass",
                    "defaultValue": "'flex items-center justify-center p-6 aspect-square'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTailwind CSS class to override the default carousel content class\n",
                    "description": "<p>Tailwind CSS class to override the default carousel content class</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "carouselItemClass",
                    "defaultValue": "'text-4xl font-semibold'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTailwind CSS class to override the default carousel item class\n",
                    "description": "<p>Tailwind CSS class to override the default carousel item class</p>\n",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "carouselMaxWidthClass",
                    "defaultValue": "'max-w-xs'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTailwind CSS class to apply to the carousel max width\n",
                    "description": "<p>Tailwind CSS class to apply to the carousel max width</p>\n",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "Array.from({ length: 5}, (_, i) => i + 1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of items to display in the carousel\n",
                    "description": "<p>Array of items to display in the carousel</p>\n",
                    "line": 58,
                    "type": "Array<>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmCarouselComponent",
                    "type": "component"
                },
                {
                    "name": "HlmCarouselContentComponent",
                    "type": "component"
                },
                {
                    "name": "HlmCarouselItemComponent",
                    "type": "component"
                },
                {
                    "name": "HlmCarouselNextComponent",
                    "type": "component"
                },
                {
                    "name": "HlmCarouselPreviousComponent",
                    "type": "component"
                },
                {
                    "name": "CardComponent",
                    "type": "component"
                },
                {
                    "name": "CardContentComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { NgFor } from '@angular/common';\n\nimport {\n  HlmCarouselComponent,\n  HlmCarouselContentComponent,\n  HlmCarouselItemComponent,\n  HlmCarouselNextComponent,\n  HlmCarouselPreviousComponent\n} from '@spartan-ng/ui-carousel-helm';\nimport { CardComponent } from '../card/partials/card.component';\nimport { CardContentComponent } from '../card/partials/card-content.component';\n\n@Component({\n  selector: 'Carousel',\n  standalone: true,\n  imports: [\n    HlmCarouselComponent,\n    HlmCarouselContentComponent,\n    HlmCarouselItemComponent,\n    HlmCarouselNextComponent,\n    HlmCarouselPreviousComponent,\n    CardComponent,\n    CardContentComponent\n  ],\n  template: `\n  <div class=\"flex items-center justify-center w-full p-4\">\n    <hlm-carousel [class]=\"'w-full ' + carouselMaxWidthClass\" >\n      <hlm-carousel-content>\n      @for (item of items; track item) {\n        <hlm-carousel-item>\n          <div class=\"p-1\">\n            <Card>\n              <CardContent [class]=\"carouselContentClass\">\n                <div [class]=\"carouselItemClass\">{{ item }}</div>\n              </CardContent>\n            </Card>\n          </div>\n        </hlm-carousel-item>\n      } @empty {\n        <p>No carousel items</p>\n      }\n      </hlm-carousel-content>\n      <button hlm-carousel-previous></button>\n      <button hlm-carousel-next></button>\n    </hlm-carousel>\n  </div>\n  `,\n})\nexport class CarouselComponent {\n  /**\n   * Tailwind CSS class to apply to the carousel max width\n   */\n  @Input() carouselMaxWidthClass = 'max-w-xs';\n  /**\n   * Array of items to display in the carousel\n   */\n  @Input() items: Array<unknown> = Array.from({ length: 5}, (_, i) => i + 1);\n  /**\n   * Tailwind CSS class to override the default carousel content class\n   */\n  @Input() carouselContentClass = 'flex items-center justify-center p-6 aspect-square';\n  /**\n   * Tailwind CSS class to override the default carousel item class\n   */\n  @Input() carouselItemClass = 'text-4xl font-semibold';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-ab00f961ad227e3d4e54780ac2bdbca8d1d9b16bdb70dd8254494110146189d591d3b4730bc465003cd17d4b5d552719f7991481bef1df41efdede74c24774bf",
            "file": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "Checkbox",
            "styleUrls": [],
            "styles": [],
            "template": "<label class=\"flex items-center\" hlmLabel>\n    @if( iconName ){\n\t  <hlm-checkbox class=\"mr-2\" [checkIconName]=\"iconName\" />\n    } @else {\n      <hlm-checkbox class=\"mr-2\" />\n    }\n\t{{ checkboxLabel }}\n</label>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "checkboxLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "IconName",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmLabelDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmCheckboxComponent",
                    "type": "component"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { NgIf } from '@angular/common';\nimport { IconName } from '@ng-icons/core';\nimport { HlmCheckboxComponent } from '@spartan-ng/ui-checkbox-helm';\nimport { HlmLabelDirective } from '@spartan-ng/ui-label-helm';\n@Component({\n\tselector: 'Checkbox',\n\tstandalone: true,\n\timports: [HlmLabelDirective, HlmCheckboxComponent, NgIf ],\n\ttemplate: `\n\t\t<label class=\"flex items-center\" hlmLabel>\n      @if( iconName ){\n\t\t\t  <hlm-checkbox class=\"mr-2\" [checkIconName]=\"iconName\" />\n      } @else {\n        <hlm-checkbox class=\"mr-2\" />\n      }\n\t\t\t{{ checkboxLabel }}\n\t\t</label>\n\t`,\n})\nexport class CheckboxComponent {\n  @Input({ required: true }) checkboxLabel!: string;\n  @Input() iconName!: IconName;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CollapsibleComponent",
            "id": "component-CollapsibleComponent-70e10d4aa057c3b2b284db2fb3e4d3ae3f93a4064868c37e33daa57b8012dbafa9077dbbb96a16261998a03a85750afc6e8bbcc9b80ea1d4369bdc641a4d5356",
            "file": "feature/ui/src/lib/ui/components/collapsible/collapsible.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({\n    lucideChevronsDownUp\n})"
                }
            ],
            "selector": "Collapsible",
            "styleUrls": [],
            "styles": [],
            "template": "<brn-collapsible [class]=\"'flex flex-col space-y-2 ' + class\">\n  <div class=\"flex items-center justify-between px-4 space-x-4\">\n    <h4 class=\"text-sm font-semibold\">{{collapsibleTitle}}</h4>\n    <button brnCollapsibleTrigger hlmBtn variant=\"ghost\" size=\"sm\" class=\"p-0 w-9\">\n      <Icon name=\"lucideChevronsDownUp\" size=\"sm\" class=\"w-4 h-4\" />\n      <span class=\"sr-only\">Toggle</span>\n    </button>\n  </div>\n  <div class=\"px-4 py-3 font-mono text-sm border rounded-md border-border\">\n    {{collapsibleTriggerText}}\n  </div>\n  <brn-collapsible-content class=\"space-y-2\">\n    @for (c of collapsibleContent; track c.text){\n      <div class=\"px-4 py-3 font-mono text-sm border rounded-md border-border\">{{c.text}}</div>\n    }\n  </brn-collapsible-content>\n</brn-collapsible>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "collapsibleContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 54,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "collapsibleTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "collapsibleTriggerText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 53,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "BrnCollapsibleComponent",
                    "type": "component"
                },
                {
                    "name": "BrnCollapsibleTriggerDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "BrnCollapsibleContentComponent",
                    "type": "component"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input} from '@angular/core';\nimport { NgFor } from '@angular/common';\nimport { HlmButtonDirective } from '@spartan-ng/ui-button-helm';\nimport {\n  BrnCollapsibleComponent,\n  BrnCollapsibleContentComponent,\n  BrnCollapsibleTriggerDirective,\n} from '@spartan-ng/ui-collapsible-brain';\nimport { IconComponent } from '../icon/icon.component';\nimport { provideIcons } from '@ng-icons/core';\nimport { lucideChevronsDownUp } from '@ng-icons/lucide';\n\n@Component({\n  selector: 'Collapsible',\n  standalone: true,\n  imports: [\n    NgFor,\n    BrnCollapsibleComponent,\n    BrnCollapsibleTriggerDirective,\n    HlmButtonDirective,\n    BrnCollapsibleContentComponent,\n    IconComponent,\n  ],\n  providers: [\n    provideIcons({\n      lucideChevronsDownUp\n    }),\n  ],\n  template: `\n    <brn-collapsible [class]=\"'flex flex-col space-y-2 ' + class\">\n      <div class=\"flex items-center justify-between px-4 space-x-4\">\n        <h4 class=\"text-sm font-semibold\">{{collapsibleTitle}}</h4>\n        <button brnCollapsibleTrigger hlmBtn variant=\"ghost\" size=\"sm\" class=\"p-0 w-9\">\n          <Icon name=\"lucideChevronsDownUp\" size=\"sm\" class=\"w-4 h-4\" />\n          <span class=\"sr-only\">Toggle</span>\n        </button>\n      </div>\n      <div class=\"px-4 py-3 font-mono text-sm border rounded-md border-border\">\n        {{collapsibleTriggerText}}\n      </div>\n      <brn-collapsible-content class=\"space-y-2\">\n        @for (c of collapsibleContent; track c.text){\n          <div class=\"px-4 py-3 font-mono text-sm border rounded-md border-border\">{{c.text}}</div>\n        }\n      </brn-collapsible-content>\n    </brn-collapsible>\n  `,\n})\nexport class CollapsibleComponent {\n  @Input() class = '';\n  @Input({ required: true}) collapsibleTitle!: string;\n  @Input({ required: true}) collapsibleTriggerText!: string;\n  @Input({ required: true}) collapsibleContent!: { text: string }[];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ComboboxComponent",
            "id": "component-ComboboxComponent-db7543d9a0827ce497bf64384356ae0c8e3e6b65053f4225cf88382c9e7136512629d73969498681083f44b6d84778d56286da62c3fa0b1a49f40c102fb06ccf",
            "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({ lucideChevronsUpDown, lucideSearch, lucideCheck })"
                }
            ],
            "selector": "Combobox",
            "styleUrls": [],
            "styles": [],
            "template": "<brn-popover [state]=\"state()\" (stateChanged)=\"stateChanged($event)\" sideOffset=\"5\" closeDelay=\"100\">\n  <button class=\"w-[200px] justify-between\" id=\"edit-profile\" variant=\"outline\" brnPopoverTrigger hlmBtn>\n    {{ currentFramework() ? currentFramework().label : 'Select framework...' }}\n    <hlm-icon size=\"sm\" name=\"lucideChevronsUpDown\" />\n  </button>\n  <brn-cmd *brnPopoverContent=\"let ctx\" hlmPopoverContent hlm class=\"p-0 w-[200px]\">\n    <hlm-cmd-input-wrapper>\n      <hlm-icon name=\"lucideSearch\" />\n      <input placeholder=\"Search framework...\" brnCmdInput hlm />\n    </hlm-cmd-input-wrapper>\n    <div *brnCmdEmpty hlmCmdEmpty>No results found.</div>\n    <brn-cmd-list hlm>\n      <brn-cmd-group hlm>\n        <button\n          *ngFor=\"let framework of frameworks\"\n          brnCmdItem\n          [value]=\"framework.value\"\n          (selected)=\"commandSelected(framework)\"\n          hlm\n        >\n          <hlm-icon\n            [class.opacity-0]=\"currentFramework()?.value !== framework.value\"\n            name=\"lucideCheck\"\n            hlmCmdIcon\n          />\n          {{ framework.label }}\n        </button>\n      </brn-cmd-group>\n    </brn-cmd-list>\n  </brn-cmd>\n</brn-popover>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentFramework",
                    "defaultValue": "signal<Framework | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "frameworks",
                    "defaultValue": "[\n    {\n      label: 'AnalogJs',\n      value: 'analogjs',\n    },\n    {\n      label: 'Angular',\n      value: 'angular',\n    },\n    {\n      label: 'Vue',\n      value: 'vue',\n    },\n    {\n      label: 'Nuxt',\n      value: 'nuxt',\n    },\n    {\n      label: 'React',\n      value: 'react',\n    },\n    {\n      label: 'NextJs',\n      value: 'nextjs',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "signal<'closed' | 'open'>('closed')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "commandSelected",
                    "args": [
                        {
                            "name": "framework",
                            "type": "Framework",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "framework",
                            "type": "Framework",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stateChanged",
                    "args": [
                        {
                            "name": "state",
                            "type": "\"open\" | \"closed\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "\"open\" | \"closed\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmCommandImports"
                },
                {
                    "name": "HlmIconComponent",
                    "type": "component"
                },
                {
                    "name": "HlmButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "BrnPopoverComponent",
                    "type": "component"
                },
                {
                    "name": "BrnPopoverTriggerDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmPopoverContentDirective",
                    "type": "directive"
                },
                {
                    "name": "BrnPopoverContentDirective",
                    "type": "directive"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "BrnCommandComponent",
                    "type": "component"
                },
                {
                    "name": "BrnCommandEmptyDirective",
                    "type": "directive"
                },
                {
                    "name": "BrnCommandGroupComponent",
                    "type": "component"
                },
                {
                    "name": "BrnCommandInputDirective",
                    "type": "directive"
                },
                {
                    "name": "BrnCommandItemDirective",
                    "type": "directive"
                },
                {
                    "name": "BrnCommandListComponent",
                    "type": "component"
                },
                {
                    "name": "BrnCommandLoaderDirective",
                    "type": "directive"
                },
                {
                    "name": "BrnCommandSeparatorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\nimport { BrnCommandComponent, BrnCommandEmptyDirective, BrnCommandGroupComponent, BrnCommandInputDirective, BrnCommandItemDirective, BrnCommandListComponent, BrnCommandLoaderDirective, BrnCommandSeparatorComponent } from '@spartan-ng/ui-command-brain';\nimport { HlmCommandImports } from '@spartan-ng/ui-command-helm';\nimport { HlmIconComponent } from '@spartan-ng/ui-icon-helm';\nimport { HlmButtonDirective } from '@spartan-ng/ui-button-helm';\nimport {\n  BrnPopoverComponent,\n  BrnPopoverContentDirective,\n  BrnPopoverTriggerDirective,\n} from '@spartan-ng/ui-popover-brain';\nimport { HlmPopoverContentDirective } from '@spartan-ng/ui-popover-helm';\nimport { NgFor} from '@angular/common';\nimport { provideIcons } from '@ng-icons/core';\nimport { lucideChevronsUpDown, lucideCheck, lucideSearch } from '@ng-icons/lucide';\n\ntype Framework = { label: string; value: string };\n\n@Component({\n  selector: 'Combobox',\n  standalone: true,\n  imports: [\n    HlmCommandImports,\n    HlmIconComponent,\n    HlmButtonDirective,\n    BrnPopoverComponent,\n    BrnPopoverTriggerDirective,\n    HlmPopoverContentDirective,\n    BrnPopoverContentDirective,\n    NgFor,\n    BrnCommandComponent,\n    BrnCommandEmptyDirective,\n    BrnCommandGroupComponent,\n    BrnCommandInputDirective,\n    BrnCommandItemDirective,\n    BrnCommandListComponent,\n    BrnCommandLoaderDirective,\n    BrnCommandSeparatorComponent,\n  ],\n  providers: [provideIcons({ lucideChevronsUpDown, lucideSearch, lucideCheck })],\n  template: `\n    <brn-popover [state]=\"state()\" (stateChanged)=\"stateChanged($event)\" sideOffset=\"5\" closeDelay=\"100\">\n      <button class=\"w-[200px] justify-between\" id=\"edit-profile\" variant=\"outline\" brnPopoverTrigger hlmBtn>\n        {{ currentFramework() ? currentFramework().label : 'Select framework...' }}\n        <hlm-icon size=\"sm\" name=\"lucideChevronsUpDown\" />\n      </button>\n      <brn-cmd *brnPopoverContent=\"let ctx\" hlmPopoverContent hlm class=\"p-0 w-[200px]\">\n        <hlm-cmd-input-wrapper>\n          <hlm-icon name=\"lucideSearch\" />\n          <input placeholder=\"Search framework...\" brnCmdInput hlm />\n        </hlm-cmd-input-wrapper>\n        <div *brnCmdEmpty hlmCmdEmpty>No results found.</div>\n        <brn-cmd-list hlm>\n          <brn-cmd-group hlm>\n            <button\n              *ngFor=\"let framework of frameworks\"\n              brnCmdItem\n              [value]=\"framework.value\"\n              (selected)=\"commandSelected(framework)\"\n              hlm\n            >\n              <hlm-icon\n                [class.opacity-0]=\"currentFramework()?.value !== framework.value\"\n                name=\"lucideCheck\"\n                hlmCmdIcon\n              />\n              {{ framework.label }}\n            </button>\n          </brn-cmd-group>\n        </brn-cmd-list>\n      </brn-cmd>\n    </brn-popover>\n  `,\n})\nexport class ComboboxComponent {\n  public frameworks = [\n    {\n      label: 'AnalogJs',\n      value: 'analogjs',\n    },\n    {\n      label: 'Angular',\n      value: 'angular',\n    },\n    {\n      label: 'Vue',\n      value: 'vue',\n    },\n    {\n      label: 'Nuxt',\n      value: 'nuxt',\n    },\n    {\n      label: 'React',\n      value: 'react',\n    },\n    {\n      label: 'NextJs',\n      value: 'nextjs',\n    },\n  ];\n  public currentFramework = signal<Framework | undefined>(undefined);\n  public state = signal<'closed' | 'open'>('closed');\n\n  stateChanged(state: 'open' | 'closed') {\n    this.state.set(state);\n  }\n\n  commandSelected(framework: Framework) {\n    this.state.set('closed');\n    if (this.currentFramework()?.value === framework.value) {\n      this.currentFramework.set(undefined);\n    } else {\n      this.currentFramework.set(framework);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CommandComponent",
            "id": "component-CommandComponent-5cf1e3067079044a3eec34f74844f2d3af04b917f50f4b6fddcafbfe6b883b3eb3fbff8653640d254c45a0397fb38ae7a8b4a102d15178f838ddecbfb1efc9d7",
            "file": "feature/ui/src/lib/ui/components/command/command.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({ lucideSearch, lucideCalendar, lucideSmile, lucidePlus, lucideUser, lucideWallet, lucideCog })"
                }
            ],
            "selector": "Command",
            "styleUrls": [],
            "styles": [],
            "template": "@if( commandData ) {\n  <brn-cmd [class]=\"class\">\n    <!-- input wrapper -->\n    <hlm-cmd-input-wrapper>\n      <hlm-icon name=\"lucideSearch\" />\n      <input placeholder=\"{{ commandData.commandInputPlaceholder }}\" brnCmdInput hlm />\n    </hlm-cmd-input-wrapper>\n    <!-- command empty -->\n    <div *brnCmdEmpty hlmCmdEmpty>{{ commandData.commandEmptyText }}</div>\n    <!-- command list -->\n    <brn-cmd-list hlm>\n      <!-- command groups -->\n      @if( commandData.commandGroups ) {\n        @for (group of commandData.commandGroups; track group.commandGroupLabel; let last = $last) {\n          <brn-cmd-group hlm [label]=\"group.commandGroupLabel\" class=\"w-full\">\n            <!-- command items -->\n            @for (item of group.commandItems; track item.commandItemLabel) {\n              <button brnCmdItem hlm class=\"w-full\">\n                <hlm-icon [name]=\"item.commandItemIcon\" hlmCmdIcon />\n                {{ item.commandItemLabel }}\n                @if( item.commandItemShortcut ) {\n                  <hlm-cmd-shortcut>{{ item.commandItemShortcut }}</hlm-cmd-shortcut>\n                }\n              </button>\n            }\n          </brn-cmd-group>\n          @if( !last || commandData.commandItems) {\n            <brn-cmd-separator hlm />\n          }\n\n        }\n      }\n      <!-- command items -->\n      @if( commandData.commandItems ) {\n        <div class=\"p-1\">\n        @for (item of commandData.commandItems; track item.commandItemLabel) {\n          <button brnCmdItem hlm class=\"w-full\">\n            <hlm-icon [name]=\"item.commandItemIcon\" hlmCmdIcon />\n            {{ item.commandItemLabel }}\n            @if( item.commandItemShortcut ) {\n              <hlm-cmd-shortcut>{{ item.commandItemShortcut }}</hlm-cmd-shortcut>\n            }\n          </button>\n        }\n        </div>\n      }\n    </brn-cmd-list>\n  </brn-cmd>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 123,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "commandData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 126,
                    "type": "CommandData",
                    "decorators": []
                },
                {
                    "name": "commandEmptyText",
                    "defaultValue": "'No results found'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 124,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "BrnCommandImports"
                },
                {
                    "name": "HlmCommandImports"
                },
                {
                    "name": "HlmIconComponent",
                    "type": "component"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                },
                {
                    "name": "HlmButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "CommandInputComponent",
                    "type": "component"
                },
                {
                    "name": "CommandListComponent",
                    "type": "component"
                },
                {
                    "name": "CommandGroupComponent",
                    "type": "component"
                },
                {
                    "name": "CommandItemComponent",
                    "type": "component"
                },
                {
                    "name": "CommandSeparatorComponent",
                    "type": "component"
                },
                {
                    "name": "CommandEmptyComponent",
                    "type": "component"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgFor"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommandGroupComponent } from './partials/command-group.component';\n\nimport { Component, Input } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport {\n  BrnCommandImports\n} from '@spartan-ng/ui-command-brain';\nimport { HlmCommandImports } from '@spartan-ng/ui-command-helm';\nimport { HlmIconComponent } from '@spartan-ng/ui-icon-helm';\nimport { HlmButtonDirective } from '@spartan-ng/ui-button-helm';\nimport { IconComponent } from '../icon/icon.component';\nimport { ButtonComponent } from '../button/button.component';\nimport { IconName, provideIcons } from '@ng-icons/core';\nimport {\n  lucideCalendar,\n  lucideWallet,\n  lucideSmile,\n  lucideCog,\n  lucideSearch,\n  lucideUser,\n  lucidePlus,\n} from '@ng-icons/lucide';\n\nimport { CommandInputComponent } from './partials/command-input.component';\nimport { CommandListComponent } from './partials/command-list.component';\nimport { CommandItemComponent } from './partials/command-item.component';\nimport { CommandSeparatorComponent } from './partials/command-separator.component';\nimport { CommandEmptyComponent } from './partials/command-empty.component';\n\nexport interface CommandItem {\n  commandItemLabel: string;\n  commandItemIcon: IconName;\n  commandItemShortcut?: string;\n}\n\nexport interface CommandGroup {\n  commandGroupLabel: string;\n  commandItems: CommandItem[];\n}\n\nexport interface CommandData {\n  commandInputPlaceholder: string;\n  commandEmptyText: string;\n  commandGroups?: CommandGroup[];\n  commandItems?: CommandItem[];\n}\n\n@Component({\n  selector: 'Command',\n  standalone: true,\n  imports: [\n    BrnCommandImports,\n    HlmCommandImports,\n    HlmIconComponent,\n    IconComponent,\n    HlmButtonDirective,\n    ButtonComponent,\n    CommandInputComponent,\n    CommandListComponent,\n    CommandGroupComponent,\n    CommandItemComponent,\n    CommandSeparatorComponent,\n    CommandEmptyComponent,\n    NgIf,\n    NgFor,\n  ],\n  providers: [\n    provideIcons({ lucideSearch, lucideCalendar, lucideSmile, lucidePlus, lucideUser, lucideWallet, lucideCog }),\n  ],\n  template: `\n    @if( commandData ) {\n      <brn-cmd [class]=\"class\">\n        <!-- input wrapper -->\n        <hlm-cmd-input-wrapper>\n          <hlm-icon name=\"lucideSearch\" />\n          <input placeholder=\"{{ commandData.commandInputPlaceholder }}\" brnCmdInput hlm />\n        </hlm-cmd-input-wrapper>\n        <!-- command empty -->\n        <div *brnCmdEmpty hlmCmdEmpty>{{ commandData.commandEmptyText }}</div>\n        <!-- command list -->\n        <brn-cmd-list hlm>\n          <!-- command groups -->\n          @if( commandData.commandGroups ) {\n            @for (group of commandData.commandGroups; track group.commandGroupLabel; let last = $last) {\n              <brn-cmd-group hlm [label]=\"group.commandGroupLabel\" class=\"w-full\">\n                <!-- command items -->\n                @for (item of group.commandItems; track item.commandItemLabel) {\n                  <button brnCmdItem hlm class=\"w-full\">\n                    <hlm-icon [name]=\"item.commandItemIcon\" hlmCmdIcon />\n                    {{ item.commandItemLabel }}\n                    @if( item.commandItemShortcut ) {\n                      <hlm-cmd-shortcut>{{ item.commandItemShortcut }}</hlm-cmd-shortcut>\n                    }\n                  </button>\n                }\n              </brn-cmd-group>\n              @if( !last || commandData.commandItems) {\n                <brn-cmd-separator hlm />\n              }\n\n            }\n          }\n          <!-- command items -->\n          @if( commandData.commandItems ) {\n            <div class=\"p-1\">\n            @for (item of commandData.commandItems; track item.commandItemLabel) {\n              <button brnCmdItem hlm class=\"w-full\">\n                <hlm-icon [name]=\"item.commandItemIcon\" hlmCmdIcon />\n                {{ item.commandItemLabel }}\n                @if( item.commandItemShortcut ) {\n                  <hlm-cmd-shortcut>{{ item.commandItemShortcut }}</hlm-cmd-shortcut>\n                }\n              </button>\n            }\n            </div>\n          }\n        </brn-cmd-list>\n      </brn-cmd>\n    }\n  `,\n})\nexport class CommandComponent {\n  @Input() class = '';\n  @Input() commandEmptyText = 'No results found';\n\n  @Input({required: true}) commandData!: CommandData;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CommandEmptyComponent",
            "id": "component-CommandEmptyComponent-26f87ccf75b4b2b7fa985d1258715b355d8e88092e5bcad5255305e9fdef8b8ffd25e5d1278252f9b993178cc2e441cb622e8c8914028ad14aa722aa2173d830",
            "file": "feature/ui/src/lib/ui/components/command/partials/command-empty.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "CommandEmpty",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: contents;\n      }\n    "
            ],
            "template": "<div *brnCmdEmpty hlmCmdEmpty>{{commandEmptyText}}</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "commandEmptyText",
                    "defaultValue": "'No items found'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "BrnCommandEmptyDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmCommandEmptyDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport  { BrnCommandEmptyDirective } from '@spartan-ng/ui-command-brain';\nimport { HlmCommandEmptyDirective } from '@spartan-ng/ui-command-helm';\n\n@Component({\n  selector: 'CommandEmpty',\n  standalone: true,\n  imports: [\n    BrnCommandEmptyDirective,\n    HlmCommandEmptyDirective,\n  ],\n  template: `\n    <div *brnCmdEmpty hlmCmdEmpty>{{commandEmptyText}}</div>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styles: [\n    `\n      :host {\n        display: contents;\n      }\n    `,\n  ]\n\n})\nexport class CommandEmptyComponent {\n  @Input() commandEmptyText = 'No items found';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: contents;\n      }\n    \n",
            "extends": []
        },
        {
            "name": "CommandGroupComponent",
            "id": "component-CommandGroupComponent-00c027b5d696dd9839fcc4ceabd9e2a1b3008ee3d93952fc093674a2add3f05fe0ac7b2fa2001f1336248ec6d7ddde4ad754892d07a2c14a45376cf0d69dc1fe",
            "file": "feature/ui/src/lib/ui/components/command/partials/command-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "CommandGroup",
            "styleUrls": [],
            "styles": [],
            "template": "<brn-cmd-group hlm [label]=\"commandGroupLabel\">\n  <ng-content />\n</brn-cmd-group>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "commandGroupLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "BrnCommandGroupComponent",
                    "type": "component"
                },
                {
                    "name": "HlmCommandGroupDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport  { BrnCommandGroupComponent } from '@spartan-ng/ui-command-brain';\nimport { HlmCommandGroupDirective } from '@spartan-ng/ui-command-helm';\n\n@Component({\n  selector: 'CommandGroup',\n  standalone: true,\n  imports: [\n    BrnCommandGroupComponent,\n    HlmCommandGroupDirective,\n  ],\n  template: `\n    <brn-cmd-group hlm [label]=\"commandGroupLabel\">\n      <ng-content />\n    </brn-cmd-group>\n  `,\n})\nexport class CommandGroupComponent {\n  @Input({ required: true }) commandGroupLabel!: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CommandInputComponent",
            "id": "component-CommandInputComponent-c3b4ec532c5a33ae904b14c9120ce4be5ec44c2c68331f4819d4f6e00582d3410d4bd1d5c3686ed10217ce96ce37ce51b078f16bd30cd9de21c9a25f90406e06",
            "file": "feature/ui/src/lib/ui/components/command/partials/command-input.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({ lucideSearch })"
                }
            ],
            "selector": "CommandInput, div[CommandInput]",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: contents;\n      }\n    "
            ],
            "template": "<hlm-cmd-input-wrapper>\n  <Icon name=\"lucideSearch\" />\n  <input placeholder=\"{{commandInputPlaceholder}}\" brnCmdInput hlm />\n</hlm-cmd-input-wrapper>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "commandInputPlaceholder",
                    "defaultValue": "'Type a command or search...'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "BrnCommandInputDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmCommandInputDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmCommandInputWrapperComponent",
                    "type": "component"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport  { BrnCommandInputDirective } from '@spartan-ng/ui-command-brain';\nimport { HlmCommandInputDirective, HlmCommandInputWrapperComponent } from '@spartan-ng/ui-command-helm';\nimport { IconComponent } from '../../icon/icon.component';\nimport { provideIcons } from '@ng-icons/core';\nimport { lucideSearch } from '@ng-icons/lucide';\n\n@Component({\n  selector: 'CommandInput, div[CommandInput]',\n  standalone: true,\n  imports: [\n    BrnCommandInputDirective,\n    HlmCommandInputDirective,\n    HlmCommandInputWrapperComponent,\n    IconComponent,\n  ],\n  providers: [\n    provideIcons({ lucideSearch }),\n  ],\n  styles: [\n    `\n      :host {\n        display: contents;\n      }\n    `,\n  ],\n  template: `\n    <hlm-cmd-input-wrapper>\n      <Icon name=\"lucideSearch\" />\n      <input placeholder=\"{{commandInputPlaceholder}}\" brnCmdInput hlm />\n    </hlm-cmd-input-wrapper>\n  `,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CommandInputComponent {\n  @Input() commandInputPlaceholder = 'Type a command or search...';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: contents;\n      }\n    \n",
            "extends": []
        },
        {
            "name": "CommandItemComponent",
            "id": "component-CommandItemComponent-31048445b8ed94faf3863e2015469c4e8bfb5e83184a92254141f57b994adbcfd6f0a7f0ee83da4cf2c6bd4556427a3cf50e569407936df88362a3cb174edcb8",
            "file": "feature/ui/src/lib/ui/components/command/partials/command-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({\n    lucideTerminal\n})"
                }
            ],
            "selector": "CommandItem",
            "styleUrls": [],
            "styles": [],
            "template": "<button brnCmdItem hlm class=\"flex w-full\">\n  <hlm-icon [name]=\"commandItemIcon\" hlmCmdIcon />\n  {{commandItemLabel}}\n  @if (commandItemShortcut){\n    <hlm-cmd-shortcut>{{commandItemShortcut}}</hlm-cmd-shortcut>\n  }\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "commandItemIcon",
                    "defaultValue": "'lucideTerminal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "commandItemLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "commandItemShortcut",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "BrnCommandItemDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmCommandItemDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmCommandItemIconDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmCommandShortcutComponent",
                    "type": "component"
                },
                {
                    "name": "HlmIconComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { NgIf } from '@angular/common';\nimport { BrnCommandItemDirective } from '@spartan-ng/ui-command-brain';\nimport { HlmCommandItemDirective, HlmCommandShortcutComponent, HlmCommandItemIconDirective } from '@spartan-ng/ui-command-helm';\nimport { HlmIconComponent } from '@spartan-ng/ui-icon-helm';\nimport { ButtonComponent } from '../../button/button.component';\nimport { IconComponent } from '../../icon/icon.component';\nimport { provideIcons, IconName } from '@ng-icons/core';\nimport { lucideTerminal } from '@ng-icons/lucide';\n\n@Component({\n  selector: 'CommandItem',\n  standalone: true,\n  imports: [\n    BrnCommandItemDirective,\n    HlmCommandItemDirective,\n    HlmCommandItemIconDirective,\n    HlmCommandShortcutComponent,\n    HlmIconComponent,\n    ButtonComponent,\n    IconComponent,\n  ],\n  providers: [\n    provideIcons({\n      lucideTerminal\n    }),\n  ],\n  template: `\n    <button brnCmdItem hlm class=\"flex w-full\">\n      <hlm-icon [name]=\"commandItemIcon\" hlmCmdIcon />\n      {{commandItemLabel}}\n      @if (commandItemShortcut){\n        <hlm-cmd-shortcut>{{commandItemShortcut}}</hlm-cmd-shortcut>\n      }\n    </button>\n  `,\n})\nexport class CommandItemComponent {\n  @Input({ required: true }) commandItemLabel!: string;\n  @Input() commandItemIcon: IconName = 'lucideTerminal';\n  @Input() commandItemShortcut?: string = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CommandListComponent",
            "id": "component-CommandListComponent-1c6a141f9399718edda85003e9237c09f77859cc66cc37c7a7a1fb6dd2f52c2b43b31f503169225f88d0b2141de4f4bb25e5a1c117f154b532bef5198bcaa1fb",
            "file": "feature/ui/src/lib/ui/components/command/partials/command-list.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "CommandList",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: contents;\n      }\n    "
            ],
            "template": "<brn-cmd-list hlm>\n  <ng-content />\n</brn-cmd-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "BrnCommandListComponent",
                    "type": "component"
                },
                {
                    "name": "HlmCommandListDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\nimport  { BrnCommandListComponent } from '@spartan-ng/ui-command-brain';\nimport { HlmCommandListDirective } from '@spartan-ng/ui-command-helm';\n\n@Component({\n  selector: 'CommandList',\n  standalone: true,\n  imports: [\n    BrnCommandListComponent,\n    HlmCommandListDirective,\n  ],\n  styles: [\n    `\n      :host {\n        display: contents;\n      }\n    `,\n  ],\n  template: `\n    <brn-cmd-list hlm>\n      <ng-content />\n    </brn-cmd-list>\n  `,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CommandListComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: contents;\n      }\n    \n",
            "extends": []
        },
        {
            "name": "CommandSeparatorComponent",
            "id": "component-CommandSeparatorComponent-f31a3cf014d857b0d9d7e33d23a89da2d71dc22572efd3eb3cd9436b23db2ab993b9188a97255f85895aa679ed377d9492cdaa34dcef63d75e6c109ea03c25b4",
            "file": "feature/ui/src/lib/ui/components/command/partials/command-separator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "CommandSeparator",
            "styleUrls": [],
            "styles": [],
            "template": "<brn-cmd-separator hlm></brn-cmd-separator>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "BrnCommandSeparatorComponent",
                    "type": "component"
                },
                {
                    "name": "HlmCommandSeparatorDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport  { BrnCommandSeparatorComponent } from '@spartan-ng/ui-command-brain';\nimport { HlmCommandSeparatorDirective } from '@spartan-ng/ui-command-helm';\n\n@Component({\n  selector: 'CommandSeparator',\n  standalone: true,\n  imports: [\n    BrnCommandSeparatorComponent,\n    HlmCommandSeparatorDirective,\n  ],\n  template: `\n    <brn-cmd-separator hlm></brn-cmd-separator>\n  `,\n})\nexport class CommandSeparatorComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-2c848db3d3597c7140e45a28a463b7b3529de33b7ca05681c1b3d3c98d4545447041101edb6510ef607370792b6381964079c164e0b5a16d6f34ed531423c430",
            "file": "feature/ui/src/lib/ui/components/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({\n    lucideShieldQuestion\n})"
                }
            ],
            "selector": "Icon",
            "styleUrls": [],
            "styles": [],
            "template": "<hlm-icon\n  [name]=\"name\"\n  [size]=\"size\"\n  [color]=\"color\"\n  [strokeWidth]=\"strokeWidth ? strokeWidth() : undefined\"\n  [class]=\"class\"></hlm-icon>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "name",
                    "defaultValue": "'lucideShieldQuestion'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 26,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'none'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IconSize",
                    "decorators": []
                },
                {
                    "name": "strokeWidth",
                    "defaultValue": "signal<string| number | undefined >(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HlmIconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, signal } from '@angular/core';\nimport { HlmIconComponent, IconSize } from '@spartan-ng/ui-icon-helm';\nimport { provideIcons, IconName } from '@ng-icons/core';\nimport { lucideShieldQuestion } from '@ng-icons/lucide';\n\n@Component({\n  selector: 'Icon',\n  standalone: true,\n  imports: [HlmIconComponent],\n  providers: [\n    provideIcons({\n      lucideShieldQuestion\n    }),\n  ],\n  template: `\n    <hlm-icon\n      [name]=\"name\"\n      [size]=\"size\"\n      [color]=\"color\"\n      [strokeWidth]=\"strokeWidth ? strokeWidth() : undefined\"\n      [class]=\"class\"></hlm-icon>\n  `,\n})\nexport class IconComponent {\n  @Input({ required: true }) name: IconName = 'lucideShieldQuestion';\n  @Input() size: IconSize = 'none';\n  @Input() color?: string;\n  @Input() strokeWidth? = signal<string| number | undefined >(undefined);\n  @Input() class?: string;\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "IconListComponent",
            "id": "component-IconListComponent-83c55d881270963a7b2d0594b4050a8b90c8ef529c66d734ef498d25c585949fc019f2358442597568e3ec6aad1d304608f2ead88e1f9209e1c94814c831a5c8",
            "file": "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({\n    lucideMail, lucideUser2, lucideActivity, lucideAccessibility, lucideBackpack, lucideApple, lucideAlarmCheck, lucideAlarmClock, lucideTrain, lucideTrash, lucideTornado, lucideTruck, lucideTv, lucideTrophy, lucidePlane, lucideShield, lucideShip, lucideShoppingCart, lucideShoppingBag, lucideSettings, lucideSearch, lucideScissors, lucideBarChart, lucideBattery, lucideDatabase, lucideCloud, lucideCamera, lucideCalendar, lucideBook, lucideBell, lucideLasso, lucideTicket, lucideThumbsUp, lucideTrees, lucideWrench\n})"
                }
            ],
            "selector": "IconList",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"grid grid-cols-7 gap-4 max-w-lg mx-auto mb-4\">\n  <Button *ngFor=\"let icon of icons\" variant=\"outline\" class=\"flex justify-center items-center\" size=\"icon\">\n    <Icon [name]=\"icon\" size=\"sm\" class=\"flex\" />\n    <span class=\"sr-only\">{{ icon }}</span>\n  </Button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icons",
                    "defaultValue": "[\n    'lucideMail',\n    'lucideUser2',\n    'lucideActivity',\n    'lucideAccessibility',\n    'lucideBackpack',\n    'lucideApple',\n    'lucideAlarmCheck',\n    'lucideAlarmClock',\n    'lucideTrain',\n    'lucideTrash',\n    'lucideTornado',\n    'lucideTruck',\n    'lucideTv',\n    'lucideTrophy',\n    'lucidePlane',\n    'lucideShield',\n    'lucideShip',\n    'lucideShoppingCart',\n    'lucideShoppingBag',\n    'lucideSettings',\n    'lucideSearch',\n    'lucideScissors',\n    'lucideBarChart',\n    'lucideBattery',\n    'lucideDatabase',\n    'lucideCloud',\n    'lucideCamera',\n    'lucideCalendar',\n    'lucideBook',\n    'lucideBell',\n    'lucideLasso',\n    'lucideTicket',\n    'lucideThumbsUp',\n    'lucideTrees',\n    'lucideWrench'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName[]",
                    "optional": false,
                    "description": "",
                    "line": 98
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconComponent } from '../icon.component';\nimport { ButtonComponent } from '../../button/button.component';\nimport { provideIcons, IconName } from '@ng-icons/core';\nimport {\n  lucideMail,\n  lucideUser2,\n  lucideActivity,\n  lucideAccessibility,\n  lucideBackpack,\n  lucideApple,\n  lucideAlarmCheck,\n  lucideAlarmClock,\n  lucideTrain,\n  lucideTrash,\n  lucideTornado,\n  lucideTruck,\n  lucideTv,\n  lucideTrophy,\n  lucidePlane,\n  lucideShield,\n  lucideShip,\n  lucideShoppingCart,\n  lucideShoppingBag,\n  lucideSettings,\n  lucideSearch,\n  lucideScissors,\n  lucideBarChart,\n  lucideBattery,\n  lucideDatabase,\n  lucideCloud,\n  lucideCamera,\n  lucideCalendar,\n  lucideBook,\n  lucideBell,\n  lucideLasso,\n  lucideTicket,\n  lucideThumbsUp,\n  lucideTrees,\n  lucideWrench\n} from '@ng-icons/lucide';\n\n@Component({\n  selector: 'IconList',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent, IconComponent],\n  providers: [\n    provideIcons({\n      lucideMail,\n      lucideUser2,\n      lucideActivity,\n      lucideAccessibility,\n      lucideBackpack,\n      lucideApple,\n      lucideAlarmCheck,\n      lucideAlarmClock,\n      lucideTrain,\n      lucideTrash,\n      lucideTornado,\n      lucideTruck,\n      lucideTv,\n      lucideTrophy,\n      lucidePlane,\n      lucideShield,\n      lucideShip,\n      lucideShoppingCart,\n      lucideShoppingBag,\n      lucideSettings,\n      lucideSearch,\n      lucideScissors,\n      lucideBarChart,\n      lucideBattery,\n      lucideDatabase,\n      lucideCloud,\n      lucideCamera,\n      lucideCalendar,\n      lucideBook,\n      lucideBell,\n      lucideLasso,\n      lucideTicket,\n      lucideThumbsUp,\n      lucideTrees,\n      lucideWrench\n    }),\n  ],\n  template: `\n    <div class=\"grid grid-cols-7 gap-4 max-w-lg mx-auto mb-4\">\n      <Button *ngFor=\"let icon of icons\" variant=\"outline\" class=\"flex justify-center items-center\" size=\"icon\">\n        <Icon [name]=\"icon\" size=\"sm\" class=\"flex\" />\n        <span class=\"sr-only\">{{ icon }}</span>\n      </Button>\n    </div>\n  `,\n  styles: []\n})\nexport class IconListComponent {\n  icons: IconName[] = [\n    'lucideMail',\n    'lucideUser2',\n    'lucideActivity',\n    'lucideAccessibility',\n    'lucideBackpack',\n    'lucideApple',\n    'lucideAlarmCheck',\n    'lucideAlarmClock',\n    'lucideTrain',\n    'lucideTrash',\n    'lucideTornado',\n    'lucideTruck',\n    'lucideTv',\n    'lucideTrophy',\n    'lucidePlane',\n    'lucideShield',\n    'lucideShip',\n    'lucideShoppingCart',\n    'lucideShoppingBag',\n    'lucideSettings',\n    'lucideSearch',\n    'lucideScissors',\n    'lucideBarChart',\n    'lucideBattery',\n    'lucideDatabase',\n    'lucideCloud',\n    'lucideCamera',\n    'lucideCalendar',\n    'lucideBook',\n    'lucideBell',\n    'lucideLasso',\n    'lucideTicket',\n    'lucideThumbsUp',\n    'lucideTrees',\n    'lucideWrench'\n  ];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "CommandDataMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CommandData",
                "defaultValue": "{\n  commandInputPlaceholder: 'Type a command or search...',\n  commandEmptyText: 'No results found.',\n  commandGroups: [\n    {\n      commandGroupLabel: 'Suggestions',\n      commandItems: [\n        {\n          commandItemLabel: 'Calendar',\n          commandItemIcon: 'lucideCalendar',\n        },\n        {\n          commandItemLabel: 'Search Emoji',\n          commandItemIcon: 'lucideSmile',\n        },\n        {\n          commandItemLabel: 'Calculator',\n          commandItemIcon: 'lucidePlus',\n        },\n      ],\n    },\n    {\n      commandGroupLabel: 'Settings',\n      commandItems: [\n        {\n          commandItemLabel: 'Profile',\n          commandItemIcon: 'lucideUser',\n          commandItemShortcut: '⌘P',\n        },\n        {\n          commandItemLabel: 'Billing',\n          commandItemIcon: 'lucideWallet',\n          commandItemShortcut: '⌘B',\n        },\n        {\n          commandItemLabel: 'Settings',\n          commandItemIcon: 'lucideCog',\n          commandItemShortcut: '⌘S',\n        },\n      ],\n    },\n  ]\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/.storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\n  stories: ['../**/*.stories.@(js|jsx|ts|tsx|mdx)'],\n  addons: [\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-themes',\n    'storybook-dark-mode',\n    'storybook-addon-data-theme-switcher'\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n  docs: {\n    autodocs: true,\n    defaultName: 'Docs',\n  },\n  staticDirs: ['../src/assets'],\n}"
            },
            {
                "name": "CustomIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    checkboxLabel: 'Accept terms and conditions',\n    iconName: 'lucideMoon',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/checkbox works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    alertTitle: 'Alert works!',\n    variant: 'default',\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'Alert Dialog',\n    cancelLabel: 'Cancel',\n    confirmLabel: 'Close Account',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    badgeText: 'This is coolness. This is MANTIS  ',\n    badgeVariant: 'default',\n    badgeSize: 'default',\n    badgeLinkUrl: '',\n    badgeRouterLinkUrl: '',\n    badgeLinkTarget: '_blank',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button works!',\n    variant: 'default',\n    size: 'lg',\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    contentClass: ''\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    descriptionClass: ''\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    footerClass: ''\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    headerClass: 'border border-dotted border-gray-300',\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    class: 'text-3xl'\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    class: 'w-[500px]'\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    icons: [\n      'lucideMail',\n      'lucideUser2',\n      'lucideActivity',\n      'lucideAccessibility',\n      'lucideBackpack',\n      'lucideApple',\n      'lucideAlarmCheck',\n      'lucideAlarmClock',\n      'lucideTrain',\n      'lucideTrash',\n      'lucideTornado',\n      'lucideTruck',\n      'lucideTv',\n      'lucideTrophy',\n      'lucidePlane',\n      'lucideShield',\n      'lucideShip',\n      'lucideShoppingCart',\n      'lucideShoppingBag',\n      'lucideSettings',\n      'lucideSearch',\n      'lucideScissors',\n      'lucideBarChart',\n      'lucideBattery',\n      'lucideDatabase',\n      'lucideCloud',\n      'lucideCamera',\n      'lucideCalendar',\n      'lucideBook',\n      'lucideBell',\n      'lucideLasso',\n      'lucideTicket',\n      'lucideThumbsUp',\n      'lucideTrees',\n      'lucideWrench'\n    ]\n  },\n}"
            },
            {
                "name": "Destructive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    alertTitle: 'Destructive works!',\n    variant: 'destructive'\n  },\n}"
            },
            {
                "name": "Destructive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Destructive works!',\n    variant: 'destructive',\n  },\n}"
            },
            {
                "name": "Ghost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Ghost works!',\n    variant: 'ghost',\n  },\n}"
            },
            {
                "name": "globalTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  dataThemes: {\n    defaultValue: {\n      list: [\n        { name: \"Zinc\", dataTheme: \"theme-default\", color: \"#212121\" },\n        { name: \"Red\", dataTheme: \"theme-red\", color: \"#ff1744\" },\n        { name: \"Green\", dataTheme: \"theme-green\", color: \"#32CD32\" },\n        { name: \"Orange\", dataTheme: \"theme-orange\", color: \"#ef6c00\" },\n        { name: \"Blue\", dataTheme: \"theme-blue\", color: \"#6A5ACD\" },\n      ],\n      dataAttribute: \"data-theme\",            // optional (default: \"data-theme\")\n      clearable: true,                        // optional (default: true)\n      toolbar: {\n        title: \"Change Theme\", // optional\n        icon: \"paintbrush\",                   // optional\n      },\n    } satisfies ThemeConfig,\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'small',\n    imgSrc: '/avatar.png',\n    imgAltText: 'avatar image description',\n    fallbackText: 'MU',\n    fallbackBgColor: '#FD005B',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/avatar works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    carouselMaxWidthClass: 'max-w-xs',\n    items: Array.from({ length: 5 }, (_, i) => i + 1),\n    carouselContentClass: 'flex items-center justify-center p-6 aspect-square',\n    carouselItemClass: 'text-4xl font-semibold',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/carousel works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/combobox works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Landscape",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    ratio: '16 / 9',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/aspect-ratio works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Link",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    badgeText: 'Time to build full stack Angular apps!',\n    badgeVariant: 'outline',\n    badgeLinkUrl: 'https://mantistech.io/',\n  }\n}"
            },
            {
                "name": "Link",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Link works!',\n    variant: 'link',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/accordion/accordion.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AccordionComponent>",
                "defaultValue": "{\n  component: AccordionComponent,\n  title: 'Components/Accordion/Accordion',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryArgs>",
                "defaultValue": "{\n  tags: ['autodocs'],\n  component: AlertComponent,\n  title: 'Components/Alert/Alert',\n\n  argTypes: {\n    variant: { control: { type: 'select' }, name: 'Alert Variant', options: ['default', 'destructive'] },\n    alertTitle: { control: { type: 'text' }, name: 'Alert Title', placeholder: 'add alert title' },\n  },\n\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n    <Alert ${argsToTemplate(args)}>\n        <p>You can now add nice and sleek components to your UI in a cinch</p>\n    </Alert>\n    `\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AlertDialogComponent>",
                "defaultValue": "{\n  tags: ['autodocs'],\n  component: AlertDialogComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [],\n    }),\n  ],\n  title: 'Components/Alert Dialog',\n  argTypes: {\n    title: { control: { type: 'text' }, name: 'Title', placeholder: 'Title' },\n    cancelLabel: { control: { type: 'text' }, name: 'Cancel Label', placeholder: 'Cancel' },\n    confirmLabel: { control: { type: 'text' }, name: 'Confirm Label', placeholder: 'add css classes' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped;\n        },\n      },\n    },\n  },\n  render: (args: AlertDialogComponent) => ({\n    props: args,\n    template: `\n      <AlertDialog ${argsToTemplate(args)} (ALERTDIALOG-CONFIRM-CLICKED)=\"alert('alert button clicked')\">\n      This action cannot be undone. This will permanently delete your account and remove your data from our\n      servers.\n      </AlertDialog>\n    `,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AspectRatioComponent>",
                "defaultValue": "{\n  component: AspectRatioComponent,\n  title: 'Components/AspectRatio/AspectRatio',\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped;\n        },\n      },\n    },\n  },\n  render: (args: AspectRatioComponent) => ({\n    props: {\n      ...args,\n      src: \"/1.jpg\",\n      alt: \"aspect-ratio works!\",\n    },\n    template: `\n    <div class=\"w-full h-full\">\n      <AspectRatio ${argsToTemplate(args)}>\n        <img src=\"{{src}}\" alt=\"{{alt}}\" />\n      </AspectRatio>\n    </div>\n    `\n  })\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AvatarComponent>",
                "defaultValue": "{\n  component: AvatarComponent,\n  title: 'Components/Avatar/Avatar',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<BadgeComponent>",
                "defaultValue": "{\n  component: BadgeComponent,\n  title: 'Components/Badge',\n  decorators: [\n    moduleMetadata({\n      imports: [],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {},\n        }\n      ]\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryArgs>",
                "defaultValue": "{\n  tags: ['autodocs'],\n  component: ButtonComponent,\n  title: 'Components/Button/Button',\n  decorators: [\n    componentWrapperDecorator(ButtonComponent, ({ args }) => args),\n  ],\n  argTypes: {\n    variant: { control: { type: 'select' }, name: 'Button Variant', options: ['secondary', 'destructive', 'outline', 'ghost', 'link', 'default'] },\n    size: { control: { type: 'select' }, name: 'Button Size', options: ['default', 'sm', 'lg', 'icon'] },\n  },\n\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({ props: args, template: `${args.label}` }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CarouselComponent>",
                "defaultValue": "{\n  component: CarouselComponent,\n  title: 'Components/Carousel',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CheckboxComponent>",
                "defaultValue": "{\n  component: CheckboxComponent,\n  title: 'Components/Checkbox',\n  decorators: [\n    moduleMetadata({\n      providers: [\n        provideIcons({\n          lucideMoon,\n        }),\n      ],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/collapsible/collapsible.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CollapsibleComponent>",
                "defaultValue": "{\n  component: CollapsibleComponent,\n  title: 'Components/Collapsible',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ComboboxComponent>",
                "defaultValue": "{\n  component: ComboboxComponent,\n  title: 'ComboboxComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CommandComponent>",
                "defaultValue": "{\n  component: CommandComponent,\n  title: 'Components/Command',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<IconComponent>",
                "defaultValue": "{\n  component: IconComponent,\n  decorators: [\n    moduleMetadata({\n      providers: [\n        provideIcons({\n          lucideMail,\n          lucideUser2,\n          lucideUsers2,\n          lucideActivity,\n          lucideTruck,\n          lucideTrain,\n        }),\n      ],\n    }),\n  ],\n  title: 'Components/Icon',\n  tags: ['autodocs'],\n  argTypes: {\n    name: { control: { type: 'select' }, name: 'Icon Name', options: ['lucideMail', 'lucideUser2', 'lucideUsers2', 'lucideActivity', 'lucideTruck', 'lucideTrain', 'lucideShieldQuestion' ] },\n    size: { control: { type: 'select' }, name: 'Icon Size', options: ['sm', 'base', 'lg', 'xl'] },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryArgs>",
                "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardContentComponent,\n  title: 'Components/Card/Partials/CardContent',\n  argTypes: {\n    contentClass: { control: { type: 'text' }, name: 'Content Class', placeholder: 'add css classes' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <CardContent ${argsToTemplate(args)}>\n        <p>\n          Alice was beginning to get very tired of sitting by her sister on the\n          bank, and of having nothing to do: once or twice she had peeped into the\n          book her sister was reading, but it had no pictures or conversations in\n          it, “and what is the use of a book, ” thought Alice, “without pictures or\n          conversations?”\n        </p>\n      </CardContent>\n    `\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryArgs>",
                "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardDescriptionComponent,\n  title: 'Components/Card/Partials/CardDescription',\n  argTypes: {\n    descriptionClass: { control: { type: 'text' }, name: 'Description Class', placeholder: 'add css classes' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <CardDescription ${argsToTemplate(args)}>\n      Alice in Wonderland\n      <small>— Lewis Carroll</small>\n      </CardDescription>\n    `\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryArgs>",
                "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardFooterComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [ButtonComponent]\n    })\n  ],\n  title: 'Components/Card/Partials/CardFooter',\n  argTypes: {\n    footerClass: { control: { type: 'text' }, name: 'Footer Class', placeholder: 'add css classes' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <CardFooter ${argsToTemplate(args)}>\n        <Button size=\"lg\">Add to bookmarks</Button>\n      </CardFooter>\n    `\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryArgs>",
                "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardHeaderComponent,\n  title: 'Components/Card/Partials/CardHeader',\n  argTypes: {\n    headerClass: { control: { type: 'text' }, name: 'Header Class' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <CardHeader ${argsToTemplate(args)}>\n        <!-- <CardTitle>Add title</CardTitle> -->\n        <!-- <CardDescription>Add descriptio</CardDescription> -->\n      </CardHeader>\n    `\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryArgs>",
                "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardTitleComponent,\n  title: 'Components/Card/Partials/CardTitle',\n  argTypes: {\n    class: { control: { type: 'text' }, name: 'Title Class' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <CardTitle ${argsToTemplate(args)}>\n        Down the Rabbit Hole\n      </CardTitle>\n    `\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StoryArgs>",
                "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardComponent,\n  title: 'Components/Card/Partials/Card',\n  argTypes: {\n    class: { control: { type: 'text' }, name: 'Card Class' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <Card ${argsToTemplate(args)}>\n        <!--\n        // add CardHeader, CardDescription, etc. here\n        -->\n      </Card>\n    `\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<IconListComponent>",
                "defaultValue": "{\n  title: 'Components/Icon/Icons List',\n  tags: ['autodocs'],\n  component: IconListComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "Outline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Outline works!',\n    variant: 'outline',\n  },\n}"
            },
            {
                "name": "Portrait",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    ratio: '9 / 16',\n  },\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  decorators: [\n    withThemeByClassName({\n      themes: {\n        light: 'light',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n    }),\n    withThemeByDataAttribute({\n      themes: {\n        light: 'light',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n      attributeName: 'data-mode',\n    }),\n    componentWrapperDecorator(\n      (story) => {\n        return `<div class=\"bg-background m-4 p-8\" style=\"margin: 0; padding: 2rem;\">${story}</div>`\n      },\n    )\n  ],\n  parameters: {\n    docs: {\n\n      story: {\n        inlineStories: false,\n        excludeDecorators: true,\n      },\n\n    },\n    options: {\n      storySort: {\n        order: ['Atoms', ['Primitives', '*'], 'Molecules', 'Organisms', 'Pages', 'Others', '*'],\n      },\n    },\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/accordion/accordion.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    class: '',\n    items: [\n      {\n        triggerText: 'Is it accessible?',\n        content: `Yes. It adheres to the WAI-ARIA design pattern.`,\n      },\n      {\n        triggerText: 'Is it styled?',\n        content: `Yes. It comes with default styles that match the other components' aesthetics.`,\n      },\n      {\n        triggerText: 'Is it animated?',\n        content: `Yes. It's animated by default, but you can disable it if you prefer.`,\n      },\n    ],\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'small',\n    imgSrc: '/avatar.png',\n    imgAltText: 'avatar image description',\n    fallbackText: 'MU',\n    fallbackBgColor: '#FD005B',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    carouselMaxWidthClass: 'max-w-xs',\n    items: Array.from({ length: 5 }, (_, i) => i + 1),\n    carouselContentClass: 'flex items-center justify-center p-6 aspect-square',\n    carouselItemClass: 'text-4xl font-semibold',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    checkboxLabel: 'Accept terms and conditions',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/collapsible/collapsible.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    class: '',\n    collapsibleTitle: '@peduarte starred 3 repositories',\n    collapsibleTriggerText: '@radix-ui/primitives',\n    collapsibleContent: [\n      { text: '@radix-ui/colors' },\n      { text: '@stitches/react' }\n    ],\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    class: '',\n    commandEmptyText: 'No results found',\n    commandData: CommandDataMock,\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'base',\n  },\n}"
            },
            {
                "name": "RouterLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    badgeText: 'Navigate to Home',\n    badgeVariant: 'default',\n    badgeRouterLinkUrl: '/home',\n  }\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Heading works!',\n    variant: 'secondary',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/button works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Square",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    ratio: '1 / 1',\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Framework",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "landscape",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "portrait",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "square",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AccordionComponent>",
                "file": "feature/ui/src/lib/ui/components/accordion/accordion.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryArgs>",
                "file": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AlertDialogComponent>",
                "file": "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AspectRatioComponent>",
                "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AvatarComponent>",
                "file": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BadgeComponent>",
                "file": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryArgs>",
                "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CarouselComponent>",
                "file": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CheckboxComponent>",
                "file": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CollapsibleComponent>",
                "file": "feature/ui/src/lib/ui/components/collapsible/collapsible.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ComboboxComponent>",
                "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CommandComponent>",
                "file": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<IconComponent>",
                "file": "feature/ui/src/lib/ui/components/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryArgs>",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryArgs>",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryArgs>",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryArgs>",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryArgs>",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StoryArgs>",
                "file": "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<IconListComponent>",
                "file": "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "StoryArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AlertComponent",
                "file": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "StoryArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "StoryArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "StoryArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "StoryArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "StoryArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "CardHeaderComponent",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "StoryArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "StoryArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "feature/ui/src/lib/ui/components/command/command.component.stories.ts": [
                {
                    "name": "CommandDataMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommandData",
                    "defaultValue": "{\n  commandInputPlaceholder: 'Type a command or search...',\n  commandEmptyText: 'No results found.',\n  commandGroups: [\n    {\n      commandGroupLabel: 'Suggestions',\n      commandItems: [\n        {\n          commandItemLabel: 'Calendar',\n          commandItemIcon: 'lucideCalendar',\n        },\n        {\n          commandItemLabel: 'Search Emoji',\n          commandItemIcon: 'lucideSmile',\n        },\n        {\n          commandItemLabel: 'Calculator',\n          commandItemIcon: 'lucidePlus',\n        },\n      ],\n    },\n    {\n      commandGroupLabel: 'Settings',\n      commandItems: [\n        {\n          commandItemLabel: 'Profile',\n          commandItemIcon: 'lucideUser',\n          commandItemShortcut: '⌘P',\n        },\n        {\n          commandItemLabel: 'Billing',\n          commandItemIcon: 'lucideWallet',\n          commandItemShortcut: '⌘B',\n        },\n        {\n          commandItemLabel: 'Settings',\n          commandItemIcon: 'lucideCog',\n          commandItemShortcut: '⌘S',\n        },\n      ],\n    },\n  ]\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CommandComponent>",
                    "defaultValue": "{\n  component: CommandComponent,\n  title: 'Components/Command',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    class: '',\n    commandEmptyText: 'No results found',\n    commandData: CommandDataMock,\n  },\n}"
                }
            ],
            "feature/ui/.storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/.storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\n  stories: ['../**/*.stories.@(js|jsx|ts|tsx|mdx)'],\n  addons: [\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-themes',\n    'storybook-dark-mode',\n    'storybook-addon-data-theme-switcher'\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n  docs: {\n    autodocs: true,\n    defaultName: 'Docs',\n  },\n  staticDirs: ['../src/assets'],\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts": [
                {
                    "name": "CustomIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    checkboxLabel: 'Accept terms and conditions',\n    iconName: 'lucideMoon',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/checkbox works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CheckboxComponent>",
                    "defaultValue": "{\n  component: CheckboxComponent,\n  title: 'Components/Checkbox',\n  decorators: [\n    moduleMetadata({\n      providers: [\n        provideIcons({\n          lucideMoon,\n        }),\n      ],\n    }),\n  ],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    checkboxLabel: 'Accept terms and conditions',\n  },\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    alertTitle: 'Alert works!',\n    variant: 'default',\n  }\n}"
                },
                {
                    "name": "Destructive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    alertTitle: 'Destructive works!',\n    variant: 'destructive'\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryArgs>",
                    "defaultValue": "{\n  tags: ['autodocs'],\n  component: AlertComponent,\n  title: 'Components/Alert/Alert',\n\n  argTypes: {\n    variant: { control: { type: 'select' }, name: 'Alert Variant', options: ['default', 'destructive'] },\n    alertTitle: { control: { type: 'text' }, name: 'Alert Title', placeholder: 'add alert title' },\n  },\n\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n    <Alert ${argsToTemplate(args)}>\n        <p>You can now add nice and sleek components to your UI in a cinch</p>\n    </Alert>\n    `\n  }),\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'Alert Dialog',\n    cancelLabel: 'Cancel',\n    confirmLabel: 'Close Account',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AlertDialogComponent>",
                    "defaultValue": "{\n  tags: ['autodocs'],\n  component: AlertDialogComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [],\n    }),\n  ],\n  title: 'Components/Alert Dialog',\n  argTypes: {\n    title: { control: { type: 'text' }, name: 'Title', placeholder: 'Title' },\n    cancelLabel: { control: { type: 'text' }, name: 'Cancel Label', placeholder: 'Cancel' },\n    confirmLabel: { control: { type: 'text' }, name: 'Confirm Label', placeholder: 'add css classes' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped;\n        },\n      },\n    },\n  },\n  render: (args: AlertDialogComponent) => ({\n    props: args,\n    template: `\n      <AlertDialog ${argsToTemplate(args)} (ALERTDIALOG-CONFIRM-CLICKED)=\"alert('alert button clicked')\">\n      This action cannot be undone. This will permanently delete your account and remove your data from our\n      servers.\n      </AlertDialog>\n    `,\n  }),\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    badgeText: 'This is coolness. This is MANTIS  ',\n    badgeVariant: 'default',\n    badgeSize: 'default',\n    badgeLinkUrl: '',\n    badgeRouterLinkUrl: '',\n    badgeLinkTarget: '_blank',\n  },\n}"
                },
                {
                    "name": "Link",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    badgeText: 'Time to build full stack Angular apps!',\n    badgeVariant: 'outline',\n    badgeLinkUrl: 'https://mantistech.io/',\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<BadgeComponent>",
                    "defaultValue": "{\n  component: BadgeComponent,\n  title: 'Components/Badge',\n  decorators: [\n    moduleMetadata({\n      imports: [],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {},\n        }\n      ]\n    }),\n  ],\n}"
                },
                {
                    "name": "RouterLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    badgeText: 'Navigate to Home',\n    badgeVariant: 'default',\n    badgeRouterLinkUrl: '/home',\n  }\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/button/button.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button works!',\n    variant: 'default',\n    size: 'lg',\n  }\n}"
                },
                {
                    "name": "Destructive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Destructive works!',\n    variant: 'destructive',\n  },\n}"
                },
                {
                    "name": "Ghost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Ghost works!',\n    variant: 'ghost',\n  },\n}"
                },
                {
                    "name": "Link",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Link works!',\n    variant: 'link',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryArgs>",
                    "defaultValue": "{\n  tags: ['autodocs'],\n  component: ButtonComponent,\n  title: 'Components/Button/Button',\n  decorators: [\n    componentWrapperDecorator(ButtonComponent, ({ args }) => args),\n  ],\n  argTypes: {\n    variant: { control: { type: 'select' }, name: 'Button Variant', options: ['secondary', 'destructive', 'outline', 'ghost', 'link', 'default'] },\n    size: { control: { type: 'select' }, name: 'Button Size', options: ['default', 'sm', 'lg', 'icon'] },\n  },\n\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({ props: args, template: `${args.label}` }),\n}"
                },
                {
                    "name": "Outline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Outline works!',\n    variant: 'outline',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Heading works!',\n    variant: 'secondary',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/button works!/gi)).toBeTruthy();\n  },\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    contentClass: ''\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryArgs>",
                    "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardContentComponent,\n  title: 'Components/Card/Partials/CardContent',\n  argTypes: {\n    contentClass: { control: { type: 'text' }, name: 'Content Class', placeholder: 'add css classes' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <CardContent ${argsToTemplate(args)}>\n        <p>\n          Alice was beginning to get very tired of sitting by her sister on the\n          bank, and of having nothing to do: once or twice she had peeped into the\n          book her sister was reading, but it had no pictures or conversations in\n          it, “and what is the use of a book, ” thought Alice, “without pictures or\n          conversations?”\n        </p>\n      </CardContent>\n    `\n  }),\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    descriptionClass: ''\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryArgs>",
                    "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardDescriptionComponent,\n  title: 'Components/Card/Partials/CardDescription',\n  argTypes: {\n    descriptionClass: { control: { type: 'text' }, name: 'Description Class', placeholder: 'add css classes' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <CardDescription ${argsToTemplate(args)}>\n      Alice in Wonderland\n      <small>— Lewis Carroll</small>\n      </CardDescription>\n    `\n  }),\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    footerClass: ''\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryArgs>",
                    "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardFooterComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [ButtonComponent]\n    })\n  ],\n  title: 'Components/Card/Partials/CardFooter',\n  argTypes: {\n    footerClass: { control: { type: 'text' }, name: 'Footer Class', placeholder: 'add css classes' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <CardFooter ${argsToTemplate(args)}>\n        <Button size=\"lg\">Add to bookmarks</Button>\n      </CardFooter>\n    `\n  }),\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    headerClass: 'border border-dotted border-gray-300',\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryArgs>",
                    "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardHeaderComponent,\n  title: 'Components/Card/Partials/CardHeader',\n  argTypes: {\n    headerClass: { control: { type: 'text' }, name: 'Header Class' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <CardHeader ${argsToTemplate(args)}>\n        <!-- <CardTitle>Add title</CardTitle> -->\n        <!-- <CardDescription>Add descriptio</CardDescription> -->\n      </CardHeader>\n    `\n  }),\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    class: 'text-3xl'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryArgs>",
                    "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardTitleComponent,\n  title: 'Components/Card/Partials/CardTitle',\n  argTypes: {\n    class: { control: { type: 'text' }, name: 'Title Class' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <CardTitle ${argsToTemplate(args)}>\n        Down the Rabbit Hole\n      </CardTitle>\n    `\n  }),\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    class: 'w-[500px]'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StoryArgs>",
                    "defaultValue": "{\n  tags: ['autodocs'],\n  component: CardComponent,\n  title: 'Components/Card/Partials/Card',\n  argTypes: {\n    class: { control: { type: 'text' }, name: 'Card Class' },\n  },\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped\n        }\n      }\n    }\n  },\n  render: (args: StoryArgs) => ({\n    props: args,\n    template: `\n      <Card ${argsToTemplate(args)}>\n        <!--\n        // add CardHeader, CardDescription, etc. here\n        -->\n      </Card>\n    `\n  }),\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    icons: [\n      'lucideMail',\n      'lucideUser2',\n      'lucideActivity',\n      'lucideAccessibility',\n      'lucideBackpack',\n      'lucideApple',\n      'lucideAlarmCheck',\n      'lucideAlarmClock',\n      'lucideTrain',\n      'lucideTrash',\n      'lucideTornado',\n      'lucideTruck',\n      'lucideTv',\n      'lucideTrophy',\n      'lucidePlane',\n      'lucideShield',\n      'lucideShip',\n      'lucideShoppingCart',\n      'lucideShoppingBag',\n      'lucideSettings',\n      'lucideSearch',\n      'lucideScissors',\n      'lucideBarChart',\n      'lucideBattery',\n      'lucideDatabase',\n      'lucideCloud',\n      'lucideCamera',\n      'lucideCalendar',\n      'lucideBook',\n      'lucideBell',\n      'lucideLasso',\n      'lucideTicket',\n      'lucideThumbsUp',\n      'lucideTrees',\n      'lucideWrench'\n    ]\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<IconListComponent>",
                    "defaultValue": "{\n  title: 'Components/Icon/Icons List',\n  tags: ['autodocs'],\n  component: IconListComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "feature/ui/.storybook/preview.ts": [
                {
                    "name": "globalTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  dataThemes: {\n    defaultValue: {\n      list: [\n        { name: \"Zinc\", dataTheme: \"theme-default\", color: \"#212121\" },\n        { name: \"Red\", dataTheme: \"theme-red\", color: \"#ff1744\" },\n        { name: \"Green\", dataTheme: \"theme-green\", color: \"#32CD32\" },\n        { name: \"Orange\", dataTheme: \"theme-orange\", color: \"#ef6c00\" },\n        { name: \"Blue\", dataTheme: \"theme-blue\", color: \"#6A5ACD\" },\n      ],\n      dataAttribute: \"data-theme\",            // optional (default: \"data-theme\")\n      clearable: true,                        // optional (default: true)\n      toolbar: {\n        title: \"Change Theme\", // optional\n        icon: \"paintbrush\",                   // optional\n      },\n    } satisfies ThemeConfig,\n  },\n}"
                },
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  decorators: [\n    withThemeByClassName({\n      themes: {\n        light: 'light',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n    }),\n    withThemeByDataAttribute({\n      themes: {\n        light: 'light',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n      attributeName: 'data-mode',\n    }),\n    componentWrapperDecorator(\n      (story) => {\n        return `<div class=\"bg-background m-4 p-8\" style=\"margin: 0; padding: 2rem;\">${story}</div>`\n      },\n    )\n  ],\n  parameters: {\n    docs: {\n\n      story: {\n        inlineStories: false,\n        excludeDecorators: true,\n      },\n\n    },\n    options: {\n      storySort: {\n        order: ['Atoms', ['Primitives', '*'], 'Molecules', 'Organisms', 'Pages', 'Others', '*'],\n      },\n    },\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'small',\n    imgSrc: '/avatar.png',\n    imgAltText: 'avatar image description',\n    fallbackText: 'MU',\n    fallbackBgColor: '#FD005B',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/avatar works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AvatarComponent>",
                    "defaultValue": "{\n  component: AvatarComponent,\n  title: 'Components/Avatar/Avatar',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'small',\n    imgSrc: '/avatar.png',\n    imgAltText: 'avatar image description',\n    fallbackText: 'MU',\n    fallbackBgColor: '#FD005B',\n  },\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    carouselMaxWidthClass: 'max-w-xs',\n    items: Array.from({ length: 5 }, (_, i) => i + 1),\n    carouselContentClass: 'flex items-center justify-center p-6 aspect-square',\n    carouselItemClass: 'text-4xl font-semibold',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/carousel works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CarouselComponent>",
                    "defaultValue": "{\n  component: CarouselComponent,\n  title: 'Components/Carousel',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    carouselMaxWidthClass: 'max-w-xs',\n    items: Array.from({ length: 5 }, (_, i) => i + 1),\n    carouselContentClass: 'flex items-center justify-center p-6 aspect-square',\n    carouselItemClass: 'text-4xl font-semibold',\n  },\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/combobox works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ComboboxComponent>",
                    "defaultValue": "{\n  component: ComboboxComponent,\n  title: 'ComboboxComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts": [
                {
                    "name": "Landscape",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    ratio: '16 / 9',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/aspect-ratio works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AspectRatioComponent>",
                    "defaultValue": "{\n  component: AspectRatioComponent,\n  title: 'Components/AspectRatio/AspectRatio',\n  parameters: {\n    docs: {\n      source: {\n        transform: (src: string) => {\n          const wrapperStriped = src.replace(/<div[^>]*>\\s*([\\s\\S]*?)\\s*<\\/div>/gi, '$1');\n          return wrapperStriped;\n        },\n      },\n    },\n  },\n  render: (args: AspectRatioComponent) => ({\n    props: {\n      ...args,\n      src: \"/1.jpg\",\n      alt: \"aspect-ratio works!\",\n    },\n    template: `\n    <div class=\"w-full h-full\">\n      <AspectRatio ${argsToTemplate(args)}>\n        <img src=\"{{src}}\" alt=\"{{alt}}\" />\n      </AspectRatio>\n    </div>\n    `\n  })\n}"
                },
                {
                    "name": "Portrait",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    ratio: '9 / 16',\n  },\n}"
                },
                {
                    "name": "Square",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    ratio: '1 / 1',\n  },\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/accordion/accordion.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/accordion/accordion.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AccordionComponent>",
                    "defaultValue": "{\n  component: AccordionComponent,\n  title: 'Components/Accordion/Accordion',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/accordion/accordion.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    class: '',\n    items: [\n      {\n        triggerText: 'Is it accessible?',\n        content: `Yes. It adheres to the WAI-ARIA design pattern.`,\n      },\n      {\n        triggerText: 'Is it styled?',\n        content: `Yes. It comes with default styles that match the other components' aesthetics.`,\n      },\n      {\n        triggerText: 'Is it animated?',\n        content: `Yes. It's animated by default, but you can disable it if you prefer.`,\n      },\n    ],\n  },\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/collapsible/collapsible.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/collapsible/collapsible.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CollapsibleComponent>",
                    "defaultValue": "{\n  component: CollapsibleComponent,\n  title: 'Components/Collapsible',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/collapsible/collapsible.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    class: '',\n    collapsibleTitle: '@peduarte starred 3 repositories',\n    collapsibleTriggerText: '@radix-ui/primitives',\n    collapsibleContent: [\n      { text: '@radix-ui/colors' },\n      { text: '@stitches/react' }\n    ],\n  },\n}"
                }
            ],
            "feature/ui/src/lib/ui/components/icon/icon.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<IconComponent>",
                    "defaultValue": "{\n  component: IconComponent,\n  decorators: [\n    moduleMetadata({\n      providers: [\n        provideIcons({\n          lucideMail,\n          lucideUser2,\n          lucideUsers2,\n          lucideActivity,\n          lucideTruck,\n          lucideTrain,\n        }),\n      ],\n    }),\n  ],\n  title: 'Components/Icon',\n  tags: ['autodocs'],\n  argTypes: {\n    name: { control: { type: 'select' }, name: 'Icon Name', options: ['lucideMail', 'lucideUser2', 'lucideUsers2', 'lucideActivity', 'lucideTruck', 'lucideTrain', 'lucideShieldQuestion' ] },\n    size: { control: { type: 'select' }, name: 'Icon Size', options: ['sm', 'base', 'lg', 'xl'] },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "feature/ui/src/lib/ui/components/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'base',\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "feature/ui/src/lib/ui/components/combobox/combobox.component.ts": [
                {
                    "name": "Framework",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.ts": [
                {
                    "name": "landscape",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                },
                {
                    "name": "portrait",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                },
                {
                    "name": "square",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                }
            ],
            "feature/ui/src/lib/ui/components/accordion/accordion.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AccordionComponent>",
                    "file": "feature/ui/src/lib/ui/components/accordion/accordion.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryArgs>",
                    "file": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "StoryArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AlertComponent",
                    "file": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AlertDialogComponent>",
                    "file": "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AspectRatioComponent>",
                    "file": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AvatarComponent>",
                    "file": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BadgeComponent>",
                    "file": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/button/button.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryArgs>",
                    "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "StoryArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CarouselComponent>",
                    "file": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CheckboxComponent>",
                    "file": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/collapsible/collapsible.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CollapsibleComponent>",
                    "file": "feature/ui/src/lib/ui/components/collapsible/collapsible.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ComboboxComponent>",
                    "file": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/command/command.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CommandComponent>",
                    "file": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/icon/icon.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<IconComponent>",
                    "file": "feature/ui/src/lib/ui/components/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryArgs>",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "StoryArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryArgs>",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "StoryArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryArgs>",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "StoryArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryArgs>",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "StoryArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "CardHeaderComponent",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryArgs>",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "StoryArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StoryArgs>",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "StoryArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<IconListComponent>",
                    "file": "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "feature/ui/.storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "globalTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/accordion/accordion.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/accordion/accordion.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/accordion/accordion.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccordionItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/alert-dialog/alert-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Destructive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Landscape",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Portrait",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Square",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/aspect-ratio/aspect-ratio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AspectRatioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Link",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/badge/badge.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RouterLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Destructive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ghost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Link",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Outline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-content.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardContentComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-description.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-description.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardDescriptionComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardFooterComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-header.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-title.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardTitleComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/card/partials/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/carousel/carousel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/carousel/carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselComponent",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/collapsible/collapsible.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/collapsible/collapsible.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/collapsible/collapsible.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollapsibleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/combobox/combobox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/combobox/combobox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComboboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommandDataMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/command.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/command.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommandComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/command.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CommandData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/command.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CommandGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/command.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CommandItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/partials/command-empty.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommandEmptyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/partials/command-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommandGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/partials/command-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommandInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/partials/command-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommandItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/partials/command-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommandListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/command/partials/command-separator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommandSeparatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/icon/icon-list/icon-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "feature/ui/src/lib/ui/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            }
        ]
    }
}